{"version":3,"sources":["helpers/data.helpers.ts","services/http.service.ts","services/config.service.ts","components/app.context.ts","components/withContext/withContext.comp.tsx","components/loader/loader.comp.tsx","components/button/button.comp.tsx","components/table/table.comp.tsx","components/cards/cards.comp.tsx","components/formRow/formRow.comp.tsx","components/queryParams/queryParams.comp.tsx","components/popup/popup.comp.tsx","helpers/file.helpers.ts","components/formPopup/formPopup.comp.tsx","components/filterField/filterField.comp.tsx","components/page/page.comp.tsx","components/navigation/navigation.comp.tsx","components/customStyles/customStyles.comp.tsx","components/app.tsx","serviceWorker.ts","index.tsx"],"names":["dataHelpers","data","dataPath","attr","extractedData","digProps","split","prop","field","type","arrayType","HttpService","baseUrl","unauthorizedRedirectUrl","errorMessageDataPath","requestHeaders","this","url","indexOf","rawData","outputUrl","Object","keys","forEach","key","urlParamName","replace","queryParams","length","replaceParamsInUrl","params","param","name","value","urlReplaceOnly","push","firstSeparator","join","reqUrl","urlIsAbsolute","origUrl","buildUrl","method","headers","assign","body","undefined","res","errorMessage","json","path","dataAtPath","extractDataByDataPath","status","statusText","redirectUrl","encodeURIComponent","document","location","href","Error","getErrorMessage","responseType","fetch","ok","text","handleError","buildRequest","makeRequest","httpService","HTTPService","config","isValid","AppContext","React","createContext","activePage","error","setError","setActivePage","withAppContext","Component","props","Consumer","context","Loader","className","Button","color","children","Table","items","fields","callbacks","customActions","map","label","item","rowIdx","fieldIdx","src","alt","target","rel","style","backgroundColor","renderTableCell","put","onClick","title","aria-hidden","action","idx","icon","delete","Cards","cardIdx","renderRow","FormRow","direction","showReset","onChange","useState","optionSources","setOptionSources","pageHeaders","renderArrayItems","originalField","array","itemIdx","inputField","renderFieldInput","fieldName","updatedArray","localValue","splice","removeItemToFieldArray","aria-label","e","preventDefault","addItemToFieldArray","changeCallback","inputProps","defaultPlaceholder","placeholder","disabled","readonly","required","checked","optionSource","a","async","actualMethod","result","optionSourceData","option","valuePath","displayPath","display","toast","message","loadOptionSourceFromRemote","sortBy","finalOptions","options","sortedOptions","orderBy","valueAsNumber","accept","originalName","QueryParams","initialParams","submitCallback","setQueryParams","submit","formChanged","submitAfterChange","updatedQueryParams","useEffect","onSubmit","queryParam","Fragment","portalRoot","getElementById","createElement","setAttribute","append","PortalPopup","el","componentDidMount","appendChild","componentWillUnmount","removeChild","ReactDOM","createPortal","Popup","_handleKeyDown","show","closeCallback","keyCode","ref","refCallback","addEventListener","bind","removeEventListener","fileHelpers","fieldIndex","flatten","require","unflatten","FormPopup","getSingleConfig","fieldsCopy","JSON","parse","stringify","loading","setLoading","formFields","setFormFields","submitForm","finalObject","formData","FormData","containFiles","isMultipartForm","validationError","checkIfFieldIsObject","fileInput","querySelector","files","firstFile","success","updatedFormFields","finalRawData","console","flattenData","initFormFields","FilterField","toLowerCase","Page","page","useParams","useHistory","pageMethods","methods","getAllConfig","getAll","getSingle","postConfig","post","putConfig","deleteConfig","openedPopup","setOpenedPopup","setItems","filter","setFilter","openEditPopup","updateItem","openCustomActionPopup","performAction","extractQueryParams","parsedParams","QueryString","search","decodeURIComponent","getAllRequest","Array","isArray","orderedItems","addItem","deleteItem","window","confirm","submitQueryParams","updatedParams","queryState","nextActivePage","pages","p","pIdx","id","parseInt","description","fieldsToFilter","filterable","filteredItems","passFilter","renderTable","renderPageContent","refreshData","Navigation","isOpened","setIsOpened","to","activeClassName","CustomStyles","cssVars","styles","vars","arr","dangerouslySetInnerHTML","__html","defaultAppName","changeFavicon","link","oldLink","head","App","firstLoad","setFirstLoad","setConfig","loadConfig","ConfigService","getRemoteConfig","remoteConfig","favicon","remoteUrl","validateConfig","appName","Provider","customStyles","scrollDuration","cosParameter","scrollY","scrollCount","oldTimestamp","performance","now","requestAnimationFrame","step","newTimestamp","Math","PI","scrollTo","round","cos","scrollToTop","exact","component","position","POSITION","TOP_CENTER","autoClose","draggable","Boolean","hostname","match","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0hBAkDaA,EAAc,I,8GA9CIC,EAAWC,GAA+C,IAA7BC,EAA4B,uDAAN,KAC9E,IAAKF,IAASC,EACZ,OAAIC,EACKF,EAAKE,GAEPF,EAGT,IAAIG,EAAqBH,EACnBI,EAAqBH,EAASI,MAAM,KAT0C,uBAWpF,YAAiBD,EAAjB,+CAA2B,CAAC,IAAnBE,EAAkB,QACzB,GAAmC,qBAAxBH,EAAcG,GAGvB,OAAO,KAFPH,EAAgBA,EAAcG,IAbkD,kFAmBpF,OAAKH,EAIDD,EACKC,EAAcD,GAGhBC,EAPE,O,2CAUiBI,GAC1B,MAAmB,WAAfA,EAAMC,QAIS,UAAfD,EAAMC,MACHD,EAAME,WAAiC,WAApBF,EAAME,e,MC+GrBC,E,WAlIb,aAA4G,IAAhGC,EAA+F,uDAA7E,GAAIC,EAAyE,uDAAvC,GAAIC,EAAmC,uDAAJ,GAAI,yBALpGF,aAKoG,OAJpGC,6BAIoG,OAHpGC,0BAGoG,OAFpGC,oBAEoG,EACzGC,KAAKJ,QAAUA,GAAW,GAC1BI,KAAKH,wBAA0BA,GAA2B,GAC1DG,KAAKF,qBAAuBA,GAAwB,GACpDE,KAAKD,eAAiB,G,0DAGFE,GACpB,OAA4B,IAAxBA,EAAIC,QAAQ,SAA0C,IAAzBD,EAAIC,QAAQ,W,yCAMpBD,EAAaE,GACtC,IAAKA,GAA8B,kBAAZA,EACrB,OAAOF,EAGT,IAAIG,EAAYH,EAOhB,OALAI,OAAOC,KAAKH,GAASI,SAAQ,SAACC,GAC5B,IAAMC,EAAY,WAAOD,GACzBJ,EAAYA,EAAUM,QAAQD,EAAcN,EAAQK,OAG/CJ,I,+BAGQH,GAA4E,IAA/DU,EAA8D,uDAA3B,GAAIR,EAAuB,uCAC1F,IAAKQ,IAAgBA,EAAYC,OAC/B,OAAOZ,KAAKa,mBAAmBZ,EAAKE,GAGtC,IAAIC,EAAYH,EACVa,EAAS,GAN2E,uBAQ1F,YAAkBH,EAAlB,+CAA+B,CAAC,IAAvBI,EAAsB,QAC7B,GAAKA,EAAMC,MAA+B,qBAAhBD,EAAME,MAKhC,GAAIF,EAAMG,eAAgB,CACxB,IAAMT,EAAY,WAAOM,EAAMC,MAC/BZ,EAAYA,EAAUM,QAAQD,EAAcM,EAAME,YAElDH,EAAOK,KAAP,UAAeJ,EAAMC,KAArB,YAA6BD,EAAME,OAAS,MAlB0C,kFAsB1F,GAAIH,EAAOF,OAAQ,CACjB,IAAMQ,EAAiBnB,EAAIC,QAAQ,MAAQ,EAAI,IAAM,IACrD,OAAOE,EAAYgB,EAAiBN,EAAOO,KAAK,KAGlD,OAAOjB,I,mCAGYU,GACnB,IAAMQ,EAAiBtB,KAAKuB,cAAcT,EAAOU,SAAWV,EAAOU,QAAUxB,KAAKJ,QAAUkB,EAAOU,QAQnG,MAAO,CACLvB,IARuBD,KAAKyB,SAASH,EAAQR,EAAOH,YAAaG,EAAOX,SASxEW,OARoB,CACpBY,OAAQZ,EAAOY,QAAU,MACzBC,QAAStB,OAAOuB,OAAO,GAAI5B,KAAKD,eAAgBe,EAAOa,SAAW,IAClEE,KAAwB,SAAlBf,EAAOY,QAAuC,QAAlBZ,EAAOY,OAAmBZ,EAAOe,UAAOC,M,sCAShDC,G,+FACxBC,EAAuB,G,4BAGND,EAAIE,Q,OAEvB,IAFMJ,E,mCAEN,EAAmB7B,KAAKF,qBAAxB,+CAAWoC,EAAmC,SACtCC,EAAanD,EAAYoD,sBAAsBP,EAAMK,MAGzDF,EAAeG,G,0SAKrBH,EAAY,UAAMD,EAAIM,OAAV,cAAsBN,EAAIO,YAAc,I,kBAE7CN,G,sHAGiBD,G,2EAEL,MAAfA,EAAIM,SAAkBrC,KAAKH,wB,uBACvB0C,EAAsBvC,KAAKH,wBAAwBa,QAAQ,aAAc8B,mBAAmBC,SAASC,SAASC,OACpHF,SAASC,SAASC,KAAOJ,E,sCAIjBK,M,mBAAY5C,KAAK6C,gBAAgBd,I,2HAGnB9B,G,+FAAaa,E,+BAAc,GAAIgC,E,+BAA6B,O,mBACxDC,MAAM9C,EAAKI,OAAOuB,OAAO,GAAId,EAAQ,M,YAA3DiB,E,QAEEiB,G,sBACEF,E,OACD,S,OAEA,S,QAEA,Y,mDAHUf,EAAIE,Q,4EAEJF,EAAIkB,Q,mFAIV,G,mCAIPjD,KAAKkD,YAAYnB,I,kLAGJL,E,EAAAA,OAAQF,E,EAAAA,QAASb,E,EAAAA,YAAaR,E,EAAAA,QAAS0B,E,EAAAA,KAAMF,E,EAAAA,QAASmB,E,EAAAA,a,EACjD9C,KAAKmD,aAAa,CAAEzB,SAAQF,UAASb,cAAaR,UAAS0B,OAAMF,YAAjF1B,E,EAAAA,IAAKa,E,EAAAA,O,mBACAd,KAAKoD,YAAYnD,EAAKa,EAAQgC,I,gGChJzCO,EAA2B,IAAIC,EAoBtB,M,wLAhBgBrD,G,4FACdoD,EAAYN,MAAM,CAC7BvB,QAASvB,K,oHAISsD,GAEpB,MAAO,CACLC,SAAS,EACTxB,aAAc,U,GAZQsB,I,wBCQfG,EAAaC,IAAMC,cAA2B,CACzDJ,OAAQ,KACRK,WAAY,KACZC,MAAO,KACPC,SAAU,aACVC,cAAe,aACfV,YAAa,IAAI1D,IChBNqE,EAAiB,SAACC,GAC7B,OAAO,SAACC,GAAD,OACL,kBAACT,EAAWU,SAAZ,MACG,SAACC,GACA,OAAO,kBAACH,EAAD,iBAAeC,EAAf,CAAsBE,QAASA,UCHjCC,G,MAAS,WACpB,OACE,yBAAKC,UAAU,2CCONC,G,MAAS,SAACL,GACrB,OACE,4CAAYA,EAAZ,CAAmBI,UAAS,iBAAYJ,EAAMI,WAAa,GAA/B,YAAqCJ,EAAMM,OAAS,MAAON,EAAMO,YCIpFC,G,MAAQ,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,MAAOC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,cAsBhD,OACE,yBAAKR,UAAU,iBACb,2BAAOA,UAAU,cACf,+BACE,4BAEIM,EAAOG,KAAI,SAACvF,GACV,OAAO,wBAAIgB,IAAG,aAAQhB,EAAMwB,OAASxB,EAAMwF,OAASxF,EAAMwB,SAG9D,yCAGJ,+BAEI2D,EAAMI,KAAI,SAACE,EAAMC,GACf,OACE,wBAAI1E,IAAG,aAAQ0E,IAEXN,EAAOG,KAAI,SAACvF,EAAO2F,GACjB,IAAMlE,EAAQjC,EAAYoD,sBAAsB6C,EAAMzF,EAAMN,SAAUM,EAAMwB,MAC5E,OAAO,wBAAIR,IAAG,aAAQ0E,EAAR,YAAkBC,IA1CpD,SAAyB1F,EAA2BwB,GAClD,GAAIA,GAA0B,kBAAVA,EAClB,MAAO,SAGT,OAAQxB,GACN,IAAK,OACH,OAAO,8BAAOwB,GAChB,IAAK,UACH,OAAO,yBAAKqD,UAAS,eAAUrD,EAAQ,OAAS,WAClD,IAAK,QACH,OAAO,yBAAKmE,IAAKnE,EAAOoE,IAAKpE,IAC/B,IAAK,MACH,OAAO,uBAAG0B,KAAM1B,EAAOqE,OAAO,SAASC,IAAI,uBAAuBtE,GACpE,IAAK,WACH,OAAO,yBAAKqD,UAAU,WAAWkB,MAAO,CAAEC,gBAAiBxE,KAC7D,QACE,OAAOA,GAyBoDyE,CAAgBlG,EAAMC,KAAMwB,OAG7E,4BACE,yBAAKqD,UAAU,mBAEXO,EAAUc,KACV,kBAAC,EAAD,CAAQC,QAAS,kBAAMf,EAAUc,IAAIV,IAAOY,MAAM,QAChD,uBAAGvB,UAAU,wBAAwBwB,cAAY,UAIlDhB,GAAiBA,EAAclE,OAAS,GACzCkE,EAAcC,KAAI,SAACgB,EAAQC,GAAT,OAChB,kBAAC,EAAD,CAAQxF,IAAG,iBAAY0E,EAAZ,YAAsBc,GAAOJ,QAAS,kBAAMf,EAAUkB,OAAOd,EAAMc,IAASF,MAAOE,EAAO/E,MACnG,uBAAGsD,UAAS,gBAAWyB,EAAOE,MAAQ,QAAUH,cAAY,aAKhEjB,EAAUqB,QACV,kBAAC,EAAD,CAAQN,QAAS,kBAAMf,EAAUqB,OAAOjB,IAAOY,MAAM,UACnD,uBAAGvB,UAAU,cAAcwB,cAAY,qBCjEpDK,G,MAAQ,SAAC,GAAyD,IAAvDxB,EAAsD,EAAtDA,MAAOC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,cAsBhD,OACE,yBAAKR,UAAU,iBAEXK,EAAMI,KAAI,SAACE,EAAMmB,GACf,OACE,yBAAK9B,UAAU,OAAO9D,IAAG,eAAU4F,IAE/BxB,EAAOG,KAAI,SAACvF,EAAO2F,GACjB,IAAMlE,EAAQjC,EAAYoD,sBAAsB6C,EAAMzF,EAAMN,SAAUM,EAAMwB,MAC5E,OACE,yBAAKsD,UAAS,mBAAc9E,EAAMC,MAAQe,IAAG,eAAU4F,EAAV,YAAqBjB,IAE/C,UAAf3F,EAAMC,MACN,+BAAQD,EAAMwF,OAASxF,EAAMwB,KAA7B,MAlCtB,SAAmBvB,EAA2BwB,GAC5C,GAAIA,GAA0B,kBAAVA,EAClB,MAAO,SAGT,OAAQxB,GACN,IAAK,OACH,OAAO,8BAAOwB,GAChB,IAAK,UACH,OAAO,yBAAKqD,UAAS,eAAUrD,EAAQ,OAAS,WAClD,IAAK,QACH,OAAO,yBAAKmE,IAAKnE,EAAOoE,IAAKpE,IAC/B,IAAK,MACH,OAAO,uBAAG0B,KAAM1B,EAAOqE,OAAO,SAASC,IAAI,uBAAuBtE,GACpE,IAAK,WACH,OAAO,yBAAKqD,UAAU,WAAWkB,MAAO,CAAEC,gBAAiBxE,KAC7D,QACE,OAAOA,GAmBQoF,CAAU7G,EAAMC,KAAMwB,OAK/B,yBAAKqD,UAAU,mBAEXO,EAAUc,KACV,kBAAC,EAAD,CAAQC,QAAS,kBAAMf,EAAUc,IAAIV,IAAOY,MAAM,QAChD,uBAAGvB,UAAU,wBAAwBwB,cAAY,UAIlDhB,GAAiBA,EAAclE,OAAS,GACzCkE,EAAcC,KAAI,SAACgB,EAAQC,GAAT,OAChB,kBAAC,EAAD,CAAQxF,IAAG,iBAAY4F,EAAZ,YAAuBJ,GAAOJ,QAAS,kBAAMf,EAAUkB,OAAOd,EAAMc,IAASF,MAAOE,EAAO/E,MACpG,uBAAGsD,UAAS,gBAAWyB,EAAOE,MAAQ,QAAUH,cAAY,aAKhEjB,EAAUqB,QACV,kBAAC,EAAD,CAAQN,QAAS,kBAAMf,EAAUqB,OAAOjB,IAAOY,MAAM,UACnD,uBAAGvB,UAAU,cAAcwB,cAAY,kB,gBC3D9CQ,G,MAAUtC,GAAe,YAAiE,IAA9DI,EAA6D,EAA7DA,QAAS5E,EAAoD,EAApDA,MAAO+G,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,SAAuB,EAC1DC,mBAAc,IAD4C,mBAC7FC,EAD6F,KAC9EC,EAD8E,KAE5FvD,EAA4Be,EAA5Bf,YAAaO,EAAeQ,EAAfR,WACfiD,GAA6B,OAAVjD,QAAU,IAAVA,OAAA,EAAAA,EAAY7D,iBAAkB,GAiEvD,SAAS+G,EAAiBC,GACxB,IAAMC,EAAeD,EAAc9F,OAAS,GAE5C,OACE,yBAAKqD,UAAU,cAEX0C,EAAMjC,KAAI,SAACE,EAAMgC,GACf,IAAMC,EAAaC,EAAiB,CAClClG,MAAOgE,EACPjE,KAAK,GAAD,OAAK+F,EAAc/F,KAAnB,YAA2BiG,KACT,SAACG,EAAWnG,GAClC,IAAMoG,GAAgBN,EAAc9F,OAAS,IAAI8D,KAAI,SAACuC,EAAiBtB,GACrE,OAAIA,IAAQiB,EACHhG,EAEFqG,KAGTb,EAASM,EAAc/F,KAAMqG,MAG/B,OACE,yBAAK/C,UAAU,kBAAkB9D,IAAG,qBAAgByG,IACjDC,EACD,uBAAGrB,MAAM,QAAQD,QAAS,kBAlCxC,SAAgCmB,EAAkCf,GAChE,IAAMqB,EAAY,YACZN,EAAc9F,OAAS,IAG7BoG,EAAaE,OAAOvB,EAAK,GAEzBS,EAASjH,EAAMwB,KAAMqG,GA2BuBG,CAAuBT,EAAeE,IAAUQ,aAAW,SAASnD,UAAU,gCAKtH,kBAAC,EAAD,CAAQA,UAAU,iBAAiBsB,QAAS,SAAC8B,GAAD,OAhDlD,SAA6BA,EAAQX,GACnCW,EAAEC,iBAEFlB,EAASjH,EAAMwB,KAAP,sBACF+F,EAAc9F,OAAS,IADrB,CAEN,MA2CqD2G,CAAoBF,EAAGX,IAAgBlB,MAAM,YAC9F,uBAAGvB,UAAU,aAAawB,cAAY,WAM9C,SAASqB,EAAiB3H,EAA0BqI,GAClD,IAAMC,EAAa,WAAsC,IAArCC,EAAoC,uDAAP,GAC/C,MAAO,CACL9G,MAAOzB,EAAMyB,MACb+G,YAAaxI,EAAMwI,aAAeD,EAClCE,SAAUzI,EAAM0I,SAChBC,SAAU3I,EAAM2I,SAChB1B,SAAU,SAACiB,GAAD,OAAYG,EAAerI,EAAMwB,KAAM0G,EAAEpC,OAAOrE,UAI9D,OAAQzB,EAAMC,MACZ,IAAK,UACH,OAAO,yCAAOA,KAAK,YAAeqI,IAA3B,CAAyCM,QAAS5I,EAAMyB,MAAOwF,SAAU,SAACiB,GAAD,OAAOG,EAAerI,EAAMwB,KAAM0G,EAAEpC,OAAO8C,SAAS,OACtI,IAAK,SACF,IAAD,EACUC,EAAiB7I,EAAjB6I,aAER,GAAIA,IAAiB1B,EAAcnH,EAAMwB,MAEvC,OAvHV,SAA0CoG,EAAmBiB,GAA7D,oBAAAC,EAAAC,OAAA,4DAEYtI,EAAgDoI,EAAhDpI,IAAKf,EAA2CmJ,EAA3CnJ,SAAUsJ,EAAiCH,EAAjCG,aAAczI,EAAmBsI,EAAnBtI,eAEhCE,EAJT,sBAKY,IAAI2C,MAAJ,wCAA2CwE,EAA3C,iBALZ,yBAAAkB,EAAA,MAQyBjF,EAAYN,MAAM,CACrCrB,OAAQ8G,GAAgB,MACxBhH,QAASvB,EACTU,YAAa,GACbgB,QAAStB,OAAOuB,OAAO,GAAIiF,EAAc9G,GAAkB,OAZjE,UAQU0I,EARV,QAeUrJ,EAAgBJ,EAAYoD,sBAAsBqG,EAAQvJ,KAEzCE,EAAcwB,OAjBzC,uBAkBY,IAAIgC,MAAJ,kDAAqDwE,EAArD,OAlBZ,QAsBUsB,EAAmBtJ,EAAc2F,KAAI,SAAC4D,EAAa3C,GAAiB,IAChE4C,EAA2BP,EAA3BO,UAAWC,EAAgBR,EAAhBQ,YAEnB,MAAsB,kBAAXF,EACFA,EAGF,CACLG,QAASD,GAAeF,EAAOE,GAAeF,EAAOE,GAA5C,iBAAqE7C,EAAM,GACpF/E,MAAO2H,GAAaD,EAAOC,GAAaD,EAAOC,GAAxC,UAAwD5C,OAInEY,EAAiB,eACZD,EADW,eAEbS,EAAYsB,KArCnB,kDAwCIK,IAAMlF,MAAM,KAAEmF,SAxClB,yDAsHUC,CAA2BzJ,EAAMwB,KAAMqH,GAChC,gCAAQ,6DAGjB,IAAMa,EAAM,UAAG1J,EAAM6I,oBAAT,aAAG,EAAoBa,OAC7BC,EAAqDxC,EAAcnH,EAAMwB,OAASxB,EAAM4J,SAAW,GACnGC,EAAgBC,YAAQH,EAAgC,kBAAXD,EAAsB,CAACA,GAAWA,GAAU,IAE/F,OACE,2BAAYpB,IACV,gDAEEuB,EAActE,KAAI,SAAC4D,EAAQ3C,GACzB,IAAMxF,EAAG,iBAAawF,EAAb,KACT,MAAsB,kBAAX2C,EACF,4BAAQnI,IAAG,UAAKA,EAAL,YAAYmI,GAAU1H,MAAO0H,GAASA,GAEnD,4BAAQnI,IAAG,UAAKA,EAAL,YAAYmI,EAAO1H,OAASA,MAAO0H,EAAO1H,OAAQ0H,EAAOG,SAAWH,EAAO1H,WAMzG,IAAK,SACH,OAAO,6BAAc6G,EAAW,kBAClC,IAAK,QAAU,IACLpI,EAAqBF,EAArBE,UACR,OAD6BF,EAAVyB,OACJvB,GAA2B,WAAdA,EAGrBoH,EAAiBtH,GAFf,6BAAcsI,EAAW,wBAIpC,IAAK,YACH,OAAO,6BAAcA,EAAW,kBAClC,IAAK,SACL,IAAK,UACH,OAAO,yCAAOrI,KAAK,UAAcqI,EAAW,KAArC,CAA2CrB,SAAU,SAACiB,GAAD,OAAOG,EAAerI,EAAMwB,KAAM0G,EAAEpC,OAAOiE,mBACzG,IAAK,QACH,OAAO,yCAAO9J,KAAK,SAAYqI,EAAW,oBAC5C,IAAK,QACH,OAAO,yCAAOrI,KAAK,SAAYqI,EAAW,oBAC5C,IAAK,WACH,OAAO,yCAAOrI,KAAK,YAAeqI,EAAW,uBAC/C,IAAK,SACH,OAAO,2BAAOrI,KAAK,SAASwB,MAAOzB,EAAMyB,QAC3C,IAAK,OACH,OAAO,2BAAOxB,KAAK,OAAO+J,OAAQhK,EAAMgK,QAAU,IAAKxB,YAAaxI,EAAMwI,aAAe,iBAAkBhH,KAAMxB,EAAMwB,MAAQ,OAAQiH,SAAUzI,EAAM0I,SAAUC,SAAU3I,EAAM2I,WACnL,IAAK,OACH,OAAO,uBAAG7D,UAAU,QAAQ9E,EAAMyB,OACpC,IAAK,OACL,QACE,OAAO,yCAAOxB,KAAK,QAAWqI,EAAW,oBAI/C,OACE,yBAAKxD,UAAS,mBAAciC,GAAa,QACvC,+BAAQ/G,EAAMwF,OAASxF,EAAMiK,aAAcjK,EAAM2I,SAAW,KAAO,IAClEhB,EAAiB3H,EAAOiH,GAEtBD,IAAchH,EAAM0I,UAAY1I,EAAMyB,OAASzB,EAAMyB,MAAML,OAAS,GACrE,uBAAGiF,MAAM,QAAQD,QAAS,kBAAMa,EAASjH,EAAMwB,KAAM,IAAI,IAAOyG,aAAW,QAAQnD,UAAU,iCC/LxFoF,G,MAAc,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,cAAeC,EAA6B,EAA7BA,eAA6B,EAClClD,mBAA8BiD,GADI,mBACjEhJ,EADiE,KACpDkJ,EADoD,KAGxE,SAASC,EAAOpC,GACVA,GACFA,EAAEC,iBAGJiC,EAAejJ,GAGjB,SAASoJ,EAAY3C,EAAmBnG,EAAY+I,GAClD,IAAMC,EAA0C,YAAItJ,GAAaoE,KAAI,SAACvF,GAKpE,OAJIA,EAAMwB,OAASoG,IACjB5H,EAAMyB,MAAQA,GAGTzB,KAGTqK,EAAeI,GAEXD,GACFF,IAQJ,OAJAI,qBAAU,WACRL,EAAeF,KACd,CAACA,IAEChJ,EAAYC,OAKf,6BAAS0D,UAAU,qBACjB,6CACA,0BAAM6F,SAAUL,GAEZnJ,EAAYoE,KAAI,SAACqF,EAAYpE,GAC3B,OACE,kBAACM,EAAD,CACE9F,IAAG,sBAAiBwF,GACpBxG,MAAO4K,EACP3D,SAAUsD,EACVvD,WAAY4D,EAAW3K,MAA4B,SAApB2K,EAAW3K,UAKlD,kBAAC,EAAD,CAAQA,KAAK,SAASmG,QAASkE,GAA/B,YAnBG,kBAAC,IAAMO,SAAP,QC/BPC,G,MAA6B7H,SAAS8H,eAAe,iBACpDD,KACHA,EAAa7H,SAAS+H,cAAc,QACzBC,aAAa,KAAM,gBAC9BhI,SAASZ,KAAK6I,OAAOJ,I,IAGjBK,E,YAGJ,WAAYzG,GAAa,IAAD,8BACtB,4CAAMA,KAHA0G,QAEgB,IAMxBC,kBAAoB,WAClBP,EAAWQ,YAAY,EAAKF,KAPN,EAUxBG,qBAAuB,WACrBT,EAAWU,YAAY,EAAKJ,KAR5B,EAAKA,GAAKnI,SAAS+H,cAAc,OAHX,E,sEAetB,OAAOS,IAASC,aAAalL,KAAKkE,MAAMO,SAAUzE,KAAK4K,Q,GAlBjC3G,aAsBbkH,EAAb,2MA+BEC,eAAiB,SAAC1D,GAAsB,IAAD,EACL,EAAKxD,MAA7BmH,EAD6B,EAC7BA,KAAMC,EADuB,EACvBA,cAEVD,GAAsB,KAAd3D,EAAE6D,SACZD,EAAc5D,IAnCpB,wEACY,IAAD,OACDlC,EAAanF,OAAOuB,OAAO,GAAI,CAAEkH,QAAS9I,KAAKkE,MAAMmH,KAAO,QAAU,QAAUrL,KAAKkE,MAAMsB,OAAS,IAE1G,OACE,kBAAC,EAAD,KAEIxF,KAAKkE,MAAMmH,KACX,yBAAK/G,UAAS,gBAAWtE,KAAKkE,MAAMI,WAAa,IAAMkB,MAAOA,GAC5D,yBAAKlB,UAAU,UAAUsB,QAAS,SAAC8B,GAAD,OAAY,EAAKxD,MAAMoH,cAAc5D,MACvE,yBAAKpD,UAAU,gBAAgBkH,IAAKxL,KAAKkE,MAAMuH,aAC5CzL,KAAKkE,MAAMO,SACZ,4BAAQoB,MAAM,QAAQvB,UAAU,cAAcsB,QAAS,SAAC8B,GAAD,OAAY,EAAKxD,MAAMoH,cAAc5D,KAC1F,uBAAGpD,UAAU,cAAcwB,cAAY,YAI7C,QAjBV,0CAwBIrD,SAASiJ,iBAAiB,UAAW1L,KAAKoL,eAAeO,KAAK3L,SAxBlE,6CA4BIyC,SAASmJ,oBAAoB,UAAW5L,KAAKoL,eAAeO,KAAK3L,WA5BrE,GAA2BiE,aCxBd4H,EAAc,I,wGAfFjH,GACrB,IAAK,IAAMkH,KAAclH,EAAQ,CAG/B,GAAmB,SAFPA,EAAOkH,GAETrM,KACR,OAAO,EAIX,OAAO,M,MCELsM,G,MAAUC,EAAQ,KAClBC,EAAYD,EAAQ,IAAQC,UAYrBC,EAAYlI,GAAe,YAAkG,IAA/FI,EAA8F,EAA9FA,QAASyB,EAAqF,EAArFA,MAAOjB,EAA8E,EAA9EA,OAAQzE,EAAsE,EAAtEA,QAASgM,EAA6D,EAA7DA,gBAAiBvC,EAA4C,EAA5CA,eAAgB0B,EAA4B,EAA5BA,cACrGc,EAAkCC,KAAKC,MAAMD,KAAKE,UAAU3H,IAC1DvB,EAA4Be,EAA5Bf,YAAaO,EAAeQ,EAAfR,WAFkH,EAGzG8C,oBAAkB,GAHuF,mBAGhI8F,EAHgI,KAGvHC,EAHuH,OAInG/F,mBAA8B,IAJqE,mBAIhIgG,EAJgI,KAIpHC,EAJoH,KAKjI9F,GAA6B,OAAVjD,QAAU,IAAVA,OAAA,EAAAA,EAAY7D,iBAAkB,GAmEvD,SAAe6M,EAAWlF,GAA1B,uBAAAY,EAAAC,OAAA,mDACEb,EAAEC,iBAEIkF,EAAmB,GACnBC,EAAW,IAAIC,SACfC,EAAwBnB,EAAYoB,gBAAgBP,GACtDQ,EAAkB,KAEtBR,EAAWnM,SAAQ,SAACf,GAClB,GAAmB,SAAfA,EAAMC,KAAV,CAoBA,GAVAoN,EAAYrN,EAAMwB,MAAQxB,EAAMyB,MAE5B+L,GACFF,EAASpC,OAAOlL,EAAMwB,KAAMxB,EAAMyB,OAGhCzB,EAAM2I,UAA2B,YAAf3I,EAAMC,OAAuBD,EAAMyB,QACvDiM,EAAkB,uCAGhBlO,EAAYmO,qBAAqB3N,IAAUA,EAAMyB,MACnD,IACE4L,EAAYrN,EAAMwB,MAAQqL,KAAKC,MAAM9M,EAAMyB,OAC3C,MAAOyG,GACPwF,EAAe,kCAA8B1N,EAAMwB,KAApC,MAIA,YAAfxB,EAAMC,OACRoN,EAAYrN,EAAMwB,MAAQxB,EAAMyB,QAAS,GAGxB,WAAfzB,EAAMC,OACRoN,EAAYrN,EAAMwB,MAAQwB,mBAAmBhD,EAAMyB,YAjCrD,CACE,IAAMmM,EAAiB3K,SAAS4K,cAAT,sBAAsC7N,EAAMwB,MAAQ,OAApD,OAEvB,GAAIoM,EAAUE,MAAM1M,OAAS,EAAG,CAC9B,IAAM2M,EAAYH,EAAUE,MAAM,GAClCR,EAASpC,OAAOlL,EAAMwB,MAAQ,OAAQuM,EAAWA,EAAUvM,YAgC7DkM,EA9CN,uBA+CInE,IAAMlF,MAAMqJ,GA/ChB,iCAmDET,GAAW,GAnDb,UAsDU5K,EAAOmL,EAAeF,EAAWb,EAAUY,GAtDrD,YAAAvE,EAAA,MAuDUsB,EAAe/H,EAAMmL,IAvD/B,QAyDIjE,IAAMyE,QAAQ,kBAEdlC,GAAc,GA3DlB,mDA6DIvC,IAAMlF,MAAM,KAAEmF,SA7DlB,QAgEEyD,GAAW,GAhEb,0DAmEA,SAAS1C,EAAY3C,EAAmBnG,GACtC,IAAIwM,EAAyCpB,KAAKC,MAAMD,KAAKE,UAAUG,IAEvEe,EAAoBA,EAAkB1I,KAAI,SAACvF,GAKzC,OAJIA,EAAMwB,OAASoG,IACjB5H,EAAMyB,MAAQA,GAGTzB,KAGTmN,EAAcc,GAQhB,OALAvD,qBAAU,YAlJV,mCAAA5B,EAAAC,OAAA,mDACMmF,EAAoBvN,GAAW,IAE/BgM,IAAmBA,EAAgBlM,IAHzC,iCAKcA,EAA6DkM,EAA7DlM,IAAKF,EAAwDoM,EAAxDpM,eAAgByI,EAAwC2D,EAAxC3D,aAActJ,EAA0BiN,EAA1BjN,SAAUyB,EAAgBwL,EAAhBxL,YAL3D,WAAA2H,EAAA,MAM2BjF,EAAYN,MAAM,CACrCrB,OAAQ8G,GAAgB,MACxBhH,QAASvB,EACTU,cACAgB,QAAStB,OAAOuB,OAAO,GAAIiF,EAAc9G,GAAkB,IAC3DI,aAXR,OAMYsI,EANZ,QAcYrJ,EAAgBJ,EAAYoD,sBAAsBqG,EAAQvJ,KAElB,kBAAlBE,IAC1BsO,EAAetO,GAjBvB,kDAoBMuO,QAAQ9J,MAAM,qCAAd,MACAkF,IAAMlF,MAAM,sCArBlB,QAyBQ+J,EAAc7B,EAAQ2B,GAAgB,IAE5Cf,EAAcP,EAAWrH,KAAI,SAACvF,GAC5B,IAAIgB,EAAMhB,EAAMwB,KAYhB,OAVAxB,EAAMiK,aAAejK,EAAMwB,KAEvBxB,EAAMN,WACRsB,EAAG,UAAMhB,EAAMN,SAAZ,YAAwBM,EAAMwB,OAKnCxB,EAAMwB,KAAOR,EAETxB,EAAYmO,qBAAqB3N,KAC/BkO,EAAalN,IAAQhB,EAAMyB,SAC7BzB,EAAMyB,MAAQoL,KAAKE,UAAUmB,EAAalN,IAAQhB,EAAMyB,MAAO,KAAM,OAAS,IAEzEzB,GAGU,UAAfA,EAAMC,MACRD,EAAMyB,MAAQyM,EAAalN,IAAQhB,EAAMyB,OAAS,GAC3CzB,IAGLoO,EAAYpN,GACdhB,EAAMyB,MAAQ2M,EAAYpN,GAG1BhB,EAAMyB,MAAQzB,EAAMyB,OAAS,GAGxBzB,OAGTiN,GAAW,GA9Db,yDAmJEoB,KAEC,IAGD,kBAAC,EAAD,CACExC,MAAM,EACN/G,UAAU,aACVgH,cAAe,kBAAMA,GAAc,KAEnC,kBAAC,IAAMjB,SAAP,KACE,4BAAKxE,GACL,iCAEI2G,EACA,kBAAC,EAAD,MACA,0BAAMrC,SAAUyC,GAEZF,EAAW3H,KAAI,SAACvF,EAAOwG,GACrB,OACE,kBAACM,EAAD,CACE9F,IAAG,gBAAWwF,GACdxG,MAAOA,EACPiH,SAAUsD,EACVvD,WAAYhH,EAAMC,MAAuB,SAAfD,EAAMC,UAKxC,yBAAK6E,UAAU,0BACb,kBAAC,EAAD,CAAQ7E,KAAK,SAASmG,QAASgH,EAAYpI,MAAM,SAAjD,kBC5MHsJ,G,MAAc,SAAC,GAA0B,IAAxBrH,EAAuB,EAAvBA,SAC5B,OACE,6BAASnC,UAAU,kBACjB,uCACA,yBAAKA,UAAU,YACb,2BAAO7E,KAAK,OAAOuI,YAAY,YAAYvB,SAAU,SAACiB,GAAD,OAAOjB,EAASiB,EAAEpC,OAAOrE,MAAM8M,sBCqW/EC,G,MAAOhK,GAjVH,SAAC,GAAyB,IAAD,EAAtBI,EAAsB,EAAtBA,QACV6J,EAASC,cAATD,KADgC,EAEbE,cAAnBhN,EAFgC,EAEhCA,KAAMuB,EAF0B,EAE1BA,SACNkB,EAA6CQ,EAA7CR,WAAYC,EAAiCO,EAAjCP,MAAOC,EAA0BM,EAA1BN,SAAUT,EAAgBe,EAAhBf,YAC/BwD,GAA6B,OAAVjD,QAAU,IAAVA,OAAA,EAAAA,EAAY7D,iBAAkB,GACjDqO,EAAuC,OAAGxK,QAAH,IAAGA,OAAH,EAAGA,EAAYyK,QACtDvJ,GAAiD,OAAVlB,QAAU,IAAVA,OAAA,EAAAA,EAAYkB,gBAAiB,GACpEwJ,EAA6C,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAaG,OAC7DpC,EAAmD,OAAGiC,QAAH,IAAGA,OAAH,EAAGA,EAAaI,UACnEC,EAAyC,OAAGL,QAAH,IAAGA,OAAH,EAAGA,EAAaM,KACzDC,EAAuC,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAazI,IACvDiJ,EAA6C,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAAalI,OAX3B,EAYVQ,oBAAkB,GAZR,mBAYjC8F,EAZiC,KAYxBC,EAZwB,OAaF/F,mBAA6B,MAb3B,mBAajCmI,EAbiC,KAapBC,EAboB,OAcFpI,oBAA0C,OAAZ4H,QAAY,IAAZA,OAAA,EAAAA,EAAc3N,cAAe,IAdzD,mBAcjCA,EAdiC,KAcpBkJ,EAdoB,OAednD,mBAAgB,IAfF,mBAejC/B,EAfiC,KAe1BoK,EAf0B,OAgBZrI,mBAAiB,IAhBL,mBAgBjCsI,GAhBiC,KAgBzBC,GAhByB,KA2BxC,SAAeC,GAAc/O,GAA7B,SAAAmI,EAAAC,OAAA,gDAYEuG,EAX4B,CAC1B3O,UACAV,KAAM,SACNoG,MAAO,cACPtC,OAAQoL,EACRxC,kBACAvC,eAAgB,SAAO/H,EAAWmL,GAAlB,SAAA1E,EAAAC,OAAA,kEAAAD,EAAA,MACD6G,GAAWtN,EAAM1B,EAAS6M,IADzB,gFAPpB,qCAeA,SAASoC,GAAsBjP,EAAc4F,GAC3C,IAAMjF,EAAsB,CAC1BX,UACAV,KAAM,SACNoG,MAAOE,EAAO/E,MAAQ,gBACtBuC,OAAQwC,EACR6D,eAAgB,SAAO/H,EAAWmL,GAAlB,SAAA1E,EAAAC,OAAA,kEAAAD,EAAA,MACD+G,GAAcxN,EAAM1B,EAAS4F,EAAQiH,IADpC,+EAKlB8B,EAAehO,GAGjB,SAAeuO,GAAcxN,EAAW1B,EAAc4F,EAA6BiH,GAAnF,mBAAA1E,EAAAC,OAAA,uDACUtI,EAAsC8F,EAAtC9F,IAAKF,EAAiCgG,EAAjChG,eAAgByI,EAAiBzC,EAAjByC,aAD/B,WAAAF,EAAA,MAGejF,EAAYN,MAAM,CAC7BrB,OAAQ8G,GAAgB,MACxBhH,QAASvB,EACTE,UACA0B,KAAMmL,EAAenL,EAAOwK,KAAKE,UAAU1K,GAC3CF,QAAQ,eACHkF,EADE,GAED9G,GAAkB,GAFjB,GAGDiN,EAAe,GAAK,CAAE,eAAgB,qBAE5ClK,aAAc,aAblB,6EAiBA,SAASwM,KACP,IAAMC,EAAeC,QAAkB9M,EAAS+M,QAUhD,QAT2D,OAAZnB,QAAY,IAAZA,OAAA,EAAAA,EAAc3N,cAAe,IAAIoE,KAAI,SAACqF,GAMnF,MAL6C,qBAAlCmF,EAAanF,EAAWpJ,MACjCoJ,EAAWnJ,MAA4B,YAApBmJ,EAAW3K,KAAwD,SAAlC8P,EAAanF,EAAWpJ,MAAoB0O,mBAAmBH,EAAanF,EAAWpJ,OAE3IoJ,EAAWnJ,MAAQmJ,EAAWnJ,OAAS,GAElCmJ,KAMX,SAAeuF,KAAf,6BAAArH,EAAAC,OAAA,mDACEkE,GAAW,GACX3I,EAAS,MAFX,SAKSwK,EALT,sBAMY,IAAI1L,MAAM,kCANtB,cASY3C,EAAwDqO,EAAxDrO,IAAKF,EAAmDuO,EAAnDvO,eAAgByI,EAAmC8F,EAAnC9F,aAActJ,EAAqBoP,EAArBpP,SAAUgK,EAAWoF,EAAXpF,OATzD,WAAAZ,EAAA,MAUyBjF,EAAYN,MAAM,CACrCrB,OAAQ8G,GAAgB,MACxBhH,QAASvB,EACTU,YAAa2O,KACb3N,QAAStB,OAAOuB,OAAO,GAAIiF,EAAa9G,GAAkB,OAdhE,UAUU0I,EAVV,OAgBUrJ,EAAgBJ,EAAYoD,sBAAsBqG,EAAQvJ,GAhBpE,uBAmBY,IAAI0D,MAAM,yCAnBtB,WAsBSgN,MAAMC,QAAQzQ,GAtBvB,uBAuBY,IAAIwD,MAAM,8BAvBtB,QA0BUkN,EAAexG,YAAQlK,EAAiC,kBAAX8J,EAAsB,CAACA,GAAWA,GAAU,IAE/F6F,EAASe,GA5Bb,kDA8BIhM,EAAS,KAAEkF,SA9Bf,QAiCEyD,GAAW,GAjCb,yDAoCA,SAAesD,GAAQlO,EAAWmL,GAAlC,mBAAA1E,EAAAC,OAAA,mDACOkG,EADP,sBAEU,IAAI7L,MAAM,+BAFpB,cAKU3C,EAAsCwO,EAAtCxO,IAAKF,EAAiC0O,EAAjC1O,eAAgByI,EAAiBiG,EAAjBjG,aAL/B,WAAAF,EAAA,MAOejF,EAAYN,MAAM,CAC7BrB,OAAQ8G,GAAgB,OACxBhH,QAASvB,EACT4B,KAAMmL,EAAenL,EAAOwK,KAAKE,UAAU1K,GAC3CF,QAAQ,eACHkF,EADE,GAED9G,GAAkB,GAFjB,GAGDiN,EAAe,GAAK,CAAE,eAAgB,qBAE5ClK,aAAc,aAhBlB,6EAoBA,SAAeqM,GAAWtN,EAAW1B,EAAc6M,GAAnD,mBAAA1E,EAAAC,OAAA,mDACOoG,EADP,sBAEU,IAAI/L,MAAM,8BAFpB,cAKU3C,EAAsC0O,EAAtC1O,IAAKF,EAAiC4O,EAAjC5O,eAAgByI,EAAiBmG,EAAjBnG,aAL/B,WAAAF,EAAA,MAOejF,EAAYN,MAAM,CAC7BrB,OAAQ8G,GAAgB,MACxBhH,QAASvB,EACTE,UACA0B,KAAMmL,EAAenL,EAAOwK,KAAKE,UAAU1K,GAC3CF,QAAQ,eACHkF,EADE,GAED9G,GAAkB,GAFjB,GAGDiN,EAAe,GAAK,CAAE,eAAgB,qBAE5ClK,aAAc,aAjBlB,6EAqBA,SAAekN,GAAW/K,GAA1B,mBAAAqD,EAAAC,OAAA,mDAC4B0H,OAAOC,QAAQ,8CAD3C,6DAQStB,EART,sBASY,IAAIhM,MAAM,iCATtB,cAYY3C,EAAsC2O,EAAtC3O,IAAKF,EAAiC6O,EAAjC7O,eAAgByI,EAAiBoG,EAAjBpG,aAZjC,WAAAF,EAAA,MAa0BjF,EAAYN,MAAM,CACtCrB,OAAQ8G,GAAgB,SACxBhH,QAASvB,EACTE,QAAS8E,EACTtD,QAAStB,OAAOuB,OAAO,GAAIiF,EAAa9G,GAAkB,IAC1D+C,aAAc,aAlBpB,eAsBM6M,KAtBN,kDAyBI5G,IAAMlF,MAAM,KAAEmF,SAzBlB,yDA6BA,SAASmH,GAAkBC,GAGzB,GAFAvG,EAAeuG,IAEX5D,EAAJ,CAKA,IAAM6D,EAAqB1P,EAAYoE,KAAI,SAACqF,EAAYpE,GACtD,MAAM,GAAN,OAAkB,IAARA,EAAY,IAAM,IAA5B,OAAiCoE,EAAWpJ,KAA5C,YAAoDwB,mBAAmB4H,EAAWnJ,OAAS,QAC1FI,KAAK,KAGRF,EAAKkP,IAkGP,OAjBAnG,qBAAU,WAAO,IAAD,IACRoG,GAA4C,OAAPlM,QAAO,IAAPA,OAAA,YAAAA,EAASb,cAAT,yBAAiBgN,aAAjB,eAAwBvB,QAAO,SAACwB,EAAGC,GAAJ,OAAaD,EAAEE,KAAOzC,GAASwC,EAAO,IAAOE,SAAS1C,GAAQ,OAAK,KAAM,KACnJ7J,EAAQL,cAAcuM,KAErB,CAACrC,IAEJ/D,qBAAU,WACRL,EAAeyF,QAEd,CAAC1L,IAEJsG,qBAAU,WAERyF,OAEC,CAAChP,IAGF,yBAAK2D,UAAU,YACb,4BAAQA,UAAU,mBAChB,gCACE,mCAAKV,QAAL,IAAKA,OAAL,EAAKA,EAAY5C,OAEL,OAAV4C,QAAU,IAAVA,OAAA,EAAAA,EAAYgN,cACZ,mCAAKhN,QAAL,IAAKA,OAAL,EAAKA,EAAYgN,cAInBnC,GACA,kBAAC,EAAD,CAAQnK,UAAU,WAAWE,MAAM,QAAQoB,QAAS,kBAAMkJ,EAAe,CAAErP,KAAM,MAAOoG,MAAO,WAAYtC,OAAQkL,EAAY7E,eAAgBmG,OAA/I,eAGJ,0BAAMzL,UAAU,oBAvDpB,WAA8B,IAAD,EAErBuM,IADqB,OAAZvC,QAAY,IAAZA,OAAA,EAAAA,EAAc1J,UAAd,OAAwB0J,QAAxB,IAAwBA,OAAxB,YAAwBA,EAAcxF,eAAtC,aAAwB,EAAuBlE,SAAU,IAC1CoK,QAAO,SAACxP,GAAD,OAAYA,EAAMsR,cAAa/L,KAAI,SAACvF,GAAD,OAAWA,EAAMwB,QAEzF,OACE,kBAAC,IAAMqJ,SAAP,KACE,kBAAC,EAAD,CACEV,cAAehJ,EACfiJ,eAAgBuG,KAGhBU,EAAejQ,QACf,kBAAC,EAAD,CAAa6F,SAAUwI,KAGvBpL,EACA,yBAAKS,UAAU,aAAaT,GAvEpC,WAAwB,IAAD,EACrB,GAAI2I,EACF,OAAO,kBAAC,EAAD,MAGT,IAAM5H,GAAqB,OAAZ0J,QAAY,IAAZA,OAAA,EAAAA,EAAc1J,UAAd,OAAwB0J,QAAxB,IAAwBA,OAAxB,YAAwBA,EAAcxF,eAAtC,aAAwB,EAAuBlE,SAAU,GAClEiM,EAAiBjM,EAAOoK,QAAO,SAACxP,GAAD,OAAYA,EAAMsR,cAAa/L,KAAI,SAACvF,GAAD,OAAWA,EAAMwB,QACrF+P,EAAgBpM,EAepB,OAbIqK,IAAU6B,EAAejQ,SAC3BmQ,EAAgBpM,EAAMqK,QAAO,SAAC/J,GAC5B,IAAI+L,GAAa,EAOjB,OANAH,EAAetQ,SAAQ,SAAC6G,GACtB,IAAMnG,EAAQgE,EAAKmC,GACE,kBAAVnG,GAAsBA,EAAM8M,cAAc7N,QAAQ8O,KAAW,IACtEgC,GAAa,MAGVA,MAIND,EAAcnQ,OAIgB,WAAnB,OAAZ0N,QAAY,IAAZA,OAAA,EAAAA,EAAcxF,QAAQrJ,MAEtB,kBAAC,EAAD,CACEoF,UAAW,CACTqB,OAAQ0I,EAAeoB,GAAa,aACpCrK,IAAKgJ,EAAYO,GAAgB,aACjCnJ,OAAQjB,EAAclE,OAASwO,GAAwB,cAEzDxK,OAAQA,EACRD,MAAOoM,EACPjM,cAAeA,IAMnB,kBAAC,EAAD,CACED,UAAW,CACTqB,OAAQ0I,EAAeoB,GAAa,aACpCrK,IAAKgJ,EAAYO,GAAgB,aACjCnJ,OAAQjB,EAAclE,OAASwO,GAAwB,cAEzDxK,OAAQA,EACRD,MAAOoM,EACPjM,cAAeA,IA3BV,yBAAKR,UAAU,aAAf,yCAiDH2M,IAuCDC,IAGDrC,GACA,kBAAC3C,EAAD,CACErG,MAAOgJ,EAAYhJ,MACnByF,cAnTR,WAAuD,IAA/B6F,EAA8B,wDACpDrC,EAAe,OAEK,IAAhBqC,GACFxB,MAgTI/F,eAAgBiF,EAAYjF,eAC5BhF,QAAQ,UAAAiK,EAAYtL,cAAZ,eAAoBqB,SAAU,GACtCzE,QAAS0O,EAAY1O,QACrBgM,gBAAiB0C,EAAY1C,uBCpU1BiF,G,MAAapN,GA1BH,SAAC,GAAqC,IAAxBT,EAAuB,EAAlCa,QAAWb,OAAuB,EAC1BmD,oBAAkB,GADQ,mBACnD2K,EADmD,KACzCC,EADyC,KAG1D,OACE,yBAAKhN,UAAU,WACb,kBAAC,EAAD,CAAQA,UAAU,iBAAiBsB,QAAS,kBAAM0L,GAAaD,KAE3DA,EACA,uBAAG/M,UAAU,cAAcwB,cAAY,SACvC,uBAAGxB,UAAU,aAAawB,cAAY,UAI1C,yBAAKxB,UAAS,0BAAqB+M,EAAW,SAAW,KACvD,yBAAK/M,UAAU,mBAEJ,OAANf,QAAM,IAANA,OAAA,EAAAA,EAAQgN,QAAS,IAAIxL,KAAI,SAACkJ,EAAMjI,GAAP,OACxB,kBAAC,IAAD,CAASuL,GAAE,WAAMtD,EAAKyC,IAAM1K,EAAM,GAAKwL,gBAAgB,SAAShR,IAAG,eAAUwF,GAAOJ,QAAS,kBAAM0L,GAAY,KAASrD,EAAKjN,gBCvB9HyQ,G,YAAe,SAAC,GAAwB,IAC7CC,EAD4C,EAArBC,OACNC,MAAQ,GACzBC,EAAM,GAEZ,IAAK,IAAMrR,KAAOkR,EAChBG,EAAI1Q,KAAJ,YAAcX,EAAd,aAAuBkR,EAAgBlR,KAGzC,OACE,2BAAOsR,wBAAyB,CAAEC,OAAO,4BAAD,OAElCF,EAAIxQ,KAAK,KAFyB,wBCFtCgC,EAAc,IAAI1D,EAClBqS,EAAyB,cAE/B,SAASC,EAAc7M,GACrB,IAAM8M,EAAOzP,SAAS+H,cAAc,QAC9B2H,EAAU1P,SAAS8H,eAAe,WACxC2H,EAAKxB,GAAK,UACVwB,EAAK3M,IAAM,gBACX2M,EAAKvP,KAAOyC,EACR+M,GACH1P,SAAS2P,KAAKpH,YAAYmH,GAE3B1P,SAAS2P,KAAKtH,YAAYoH,GAmHbG,MAhHf,WAAgB,IAAD,QACqB3L,oBAAkB,GADvC,mBACN4L,EADM,KACKC,EADL,OAEe7L,mBAAyB,MAFxC,mBAENnD,EAFM,KAEEiP,EAFF,OAGuB9L,oBAAmC,OAANnD,QAAM,IAANA,OAAA,YAAAA,EAAQgN,aAAR,eAAgB,KAAM,MAH1E,mBAGN3M,EAHM,KAGMG,EAHN,OAIa2C,mBAAwB,MAJrC,mBAIN7C,EAJM,KAICC,EAJD,KAyDboG,qBAAU,YAnDV,SAAeuI,EAAWxS,GAA1B,eAAAqI,EAAAC,OAAA,2EAAAD,EAAA,MAEwCoK,EAAcC,gBAAgB1S,IAFtE,UAEU2S,EAFV,OAKIvP,EAAYzD,QAAUgT,EAAahT,SAAW,GAC9CyD,EAAYvD,qBAAuB8S,EAAa9S,sBAAwB,GACxEuD,EAAYxD,wBAA0B+S,EAAa/S,yBAA2B,GAC9EwD,EAAYtD,eAAiB6S,EAAa7S,gBAAkB,GAC5D0C,SAASoD,MAAQ+M,EAAa5R,MAAQgR,GAEtC,OAAIY,QAAJ,IAAIA,OAAJ,EAAIA,EAAcC,UAChBZ,EAAcW,EAAaC,WAZjC,OAeQtP,QAfR,IAeQA,OAfR,EAeQA,EAAQuP,WAfhB,oCAAAxK,EAAA,MAgBmBmK,EAAWlP,EAAOuP,YAhBrC,iDAmBIN,EAAUI,GAnBd,kDAqBIjF,QAAQ9J,MAAM,6BAAd,MArBJ,QAwBE0O,GAAa,GAxBf,yDAoDEE,CAAW,mBAEV,IAEHvI,qBAAU,WAAO,IAAD,EACoBwI,EAAcK,eAAexP,GAAvDC,EADM,EACNA,QAASxB,EADH,EACGA,aACZwB,GACHM,EAAS9B,KAGV,CAACuB,IAEJ,IAAMyP,GAAwB,OAANzP,QAAM,IAANA,OAAA,EAAAA,EAAQvC,OAAQgR,EAExC,OACE,yBAAK1N,UAAU,eAEVf,EAID,kBAACE,EAAWwP,SAAZ,CAAqBhS,MAAO,CAAEsC,SAAQK,aAAYG,gBAAeF,QAAOC,WAAUT,gBAE9EE,EAAO2P,cACP,kBAAC,EAAD,CACEvB,OAAQpO,EAAO2P,eAGnB,kBAAC,IAAD,KACE,+BACE,wBAAIrN,MAAOmN,EAASpN,QAAS,kBAvDzC,WAAoD,IAA/BuN,EAA8B,uDAAL,IACxCC,EAAenD,OAAOoD,QAAU,EACpCC,EAAc,EACdC,EAAeC,YAAYC,MAkB3BxD,OAAOyD,uBAhBP,SAASC,EAAMC,IACXN,GAAeO,KAAKC,IAAMX,GAAkBS,EAAeL,MAExCM,KAAKC,IACtB7D,OAAO8D,SAAS,EAAG,GAGE,IAAnB9D,OAAOoD,UAIXpD,OAAO8D,SAAS,EAAGF,KAAKG,MAAMZ,EAAeA,EAAeS,KAAKI,IAAIX,KACrEC,EAAeK,EACf3D,OAAOyD,sBAAsBC,OAqCYO,KAAgBlB,GAEjD,kBAAC5B,EAAD,OAIF7N,GACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4Q,OAAK,EAACjS,KAAK,SAASkS,UAAWpG,IACtC,kBAAC,IAAD,CAAU9L,KAAK,IAAIqP,GAAE,YAAY,OAANhO,QAAM,IAANA,OAAA,YAAAA,EAAQgN,aAAR,yBAAgB,UAAhB,eAAoBG,KAAM,QAGzD,kBAAC,IAAD,CACE2D,SAAUtL,IAAMuL,SAASC,WACzBC,UAAW,IACXC,WAAW,MA3BjB,yBAAKnQ,UAAU,aACZgO,EAAY,2BAA6B,iCC9FhCoC,QACW,cAA7BzE,OAAOvN,SAASiS,UAEe,UAA7B1E,OAAOvN,SAASiS,UAEhB1E,OAAOvN,SAASiS,SAASC,MACvB,2D,MCXN3J,IAAS4J,OAAO,kBAAC,EAAD,MAASpS,SAAS8H,eAAe,SD4H3C,kBAAmBuK,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a2fec0c8.chunk.js","sourcesContent":["import { IConfigInputField } from \"../common/models/config.model\";\n\nclass DataHelpers {\n\n  public extractDataByDataPath(data: any, dataPath: string, attr: string | null = null) {\n    if (!data || !dataPath) {\n      if (attr) {\n        return data[attr];\n      }\n      return data;\n    }\n\t\n    let extractedData: any = data;\n    const digProps: string[] = dataPath.split('.');\n\n    for (let prop of digProps) {\n      if (typeof extractedData[prop] !== 'undefined') {\n        extractedData = extractedData[prop];\n      } else {\n        return null;\n      }\n    }\n\n    if (!extractedData) {\n      return null;\n    }\n\n    if (attr) {\n      return extractedData[attr];\n    }\n\n    return extractedData;\n  }\n\n  public checkIfFieldIsObject(field: IConfigInputField): boolean {\n    if (field.type === 'object') {\n      return true;\n    }\n\n    if (field.type === 'array') {\n      if (!field.arrayType || field.arrayType === 'object') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nexport const dataHelpers = new DataHelpers();","import { TConfigMethod, IConfigInputField } from '../common/models/config.model';\nimport { dataHelpers } from '../helpers/data.helpers';\n\nexport type ResponseType = 'json' | 'text' | 'boolean' | 'status';\n\nexport interface IFetchParams {\n  origUrl: string\n  method?: TConfigMethod\n  headers?: any\n  queryParams?: IConfigInputField[]\n  rawData?: any\n  body?: any\n  responseType?: ResponseType\n}\n\nclass HttpService {\n  public baseUrl: string;\n  public unauthorizedRedirectUrl: string;\n  public errorMessageDataPath: string | string[];\n  public requestHeaders: any;\n\n  constructor(baseUrl: string = '', unauthorizedRedirectUrl: string = '', errorMessageDataPath: string = '') {\n    this.baseUrl = baseUrl || '';\n    this.unauthorizedRedirectUrl = unauthorizedRedirectUrl || '';\n    this.errorMessageDataPath = errorMessageDataPath || '';\n    this.requestHeaders = {};\n  }\n\n  private urlIsAbsolute(url: string) {\n    if (url.indexOf('http') === 0 || url.indexOf('https') === 0) {\n      return true;\n    }\n    return false;\n  }\n\n  private replaceParamsInUrl(url: string, rawData?: any): string {\n    if (!rawData || typeof rawData !== 'object') {\n      return url;\n    }\n\n    let outputUrl = url;\n    \n    Object.keys(rawData).forEach((key) => {\n      const urlParamName = `:${key}`;\n      outputUrl = outputUrl.replace(urlParamName, rawData[key] as string);\n    });\n\n    return outputUrl;\n  }\n\n  private buildUrl(url: string, queryParams: IConfigInputField[] = [], rawData?: any): string {\n    if (!queryParams || !queryParams.length) {\n      return this.replaceParamsInUrl(url, rawData);\n    }\n\n    let outputUrl = url;\n    const params = [];\n\n    for (let param of queryParams) {\n      if (!param.name || typeof param.value === 'undefined') {\n        continue;\n      }\n\n      // TODO: Add docs to \"urlReplaceOnly\"\n      if (param.urlReplaceOnly) {\n        const urlParamName = `:${param.name}`;\n        outputUrl = outputUrl.replace(urlParamName, param.value as string);\n      } else {\n        params.push(`${param.name}=${param.value || ''}`);\n      }\n    }\n\n    if (params.length) {\n      const firstSeparator = url.indexOf('?') >= 0 ? '&' : '?';\n      return outputUrl + firstSeparator + params.join('&');\n    }\n\n    return outputUrl;\n  }\n\n  private buildRequest(params: IFetchParams): { url: string, params: any } {\n    const reqUrl: string = this.urlIsAbsolute(params.origUrl) ? params.origUrl : this.baseUrl + params.origUrl;\n    const finalUrl: string = this.buildUrl(reqUrl, params.queryParams, params.rawData);\n    const requestParams = {\n      method: params.method || 'get',\n      headers: Object.assign({}, this.requestHeaders, params.headers || {}),\n      body: params.method === 'post' || params.method === 'put' ? params.body : undefined\n    };\n\n    return {\n      url: finalUrl,\n      params: requestParams\n    };\n  }\n\n  private async getErrorMessage(res: Response | any): Promise<string> {\n    let errorMessage: string = '';\n\n    try {\n      const body = await res.json();\n\n      for (const path of this.errorMessageDataPath) {\n        const dataAtPath = dataHelpers.extractDataByDataPath(body, path);\n\n        if (dataAtPath) {\n          errorMessage = dataAtPath;\n        }\n      }\n    } catch {}\n\n    errorMessage = `${res.status} - ${res.statusText || ''}`;\n\n    return errorMessage;\n  }\n\n  private async handleError(res: Response) {\n    // In case response status is \"Unauthorized\", redirect to relevant url\n    if (res.status === 401 && this.unauthorizedRedirectUrl) {\n      const redirectUrl: string = this.unauthorizedRedirectUrl.replace(':returnUrl', encodeURIComponent(document.location.href));\n      document.location.href = redirectUrl;\n      return;\n    }\n\n    throw new Error(await this.getErrorMessage(res));\n  }\n\n  private async makeRequest(url: string, params: any = {}, responseType: ResponseType = 'json') {\n    const res: Response = await fetch(url, Object.assign({}, params, {}));\n    \n    if (res.ok) {\n      switch (responseType) {\n        case 'json':\n          return await res.json();  \n        case 'text':\n          return await res.text();\n        case 'boolean':\n          return true;\n        default:\n          return true;\n      }\n    }\n\n    await this.handleError(res);\n  }\n\n  public async fetch({ method, origUrl, queryParams, rawData, body, headers, responseType }: IFetchParams) {\n    const { url, params } = this.buildRequest({ method, origUrl, queryParams, rawData, body, headers });\n    return await this.makeRequest(url, params, responseType);\n  }\n}\n\nexport default HttpService;","import HTTPService from './http.service';\nimport { IConfig } from '../common/models/config.model';\n\nconst httpService: HTTPService = new HTTPService();\n\nclass ConfigService extends HTTPService {\n\n  public async getRemoteConfig(url: string) {\n    return await httpService.fetch({\n      origUrl: url,\n    });\n  }\n\n  public validateConfig(config: IConfig | null): { isValid: boolean, errorMessage: string | null } {\n    // TODO: Validate mandatory fields in config file\n    return {\n      isValid: true,\n      errorMessage: null\n    };\n  }\n\n}\n\nexport default new ConfigService();","import React from 'react';\nimport { IConfig, IConfigPage } from '../common/models/config.model';\nimport HttpService from '../services/http.service';\n\nexport interface IAppContext {\n  config: IConfig | null\n  activePage: IConfigPage | null\n  error: string | null\n  setError: (error: string | null) => void\n  setActivePage: (activePage: IConfigPage | null) => void\n  httpService: HttpService\n}\n\nexport const AppContext = React.createContext<IAppContext>({\n  config: null,\n  activePage: null,\n  error: null,\n  setError: () => {},\n  setActivePage: () => {},\n  httpService: new HttpService()\n});","import React from 'react';\nimport { AppContext } from '../app.context';\n\nexport const withAppContext = (Component: any) => {\n  return (props: any) => (\n    <AppContext.Consumer>    \n      {(context) => {\n        return <Component {...props} context={context} />\n      }}\n    </AppContext.Consumer>\n  );\n};","import React from 'react';\n\nimport './loader.scss';\n\nexport const Loader = () => {\n  return (\n    <div className=\"app-loader cp-spinner cp-balls small\"></div>\n  );\n};","import React from 'react';\n\nimport './button.scss';\n\ninterface IProps {\n  children: any\n  type?: 'submit' | 'button' | 'reset'\n  title?: string\n  className?: string\n  onClick?: (e: any) => void\n  color?: 'gray' | 'blue' | 'green' | 'red'\n}\n\nexport const Button = (props: IProps) => {\n  return (\n    <button {...props} className={`button ${props.className || ''} ${props.color || ''}`}>{props.children}</button>\n  );\n};","import React from 'react';\n\nimport { TConfigDisplayField, IConfigDisplayField, IConfigCustomAction } from '../../common/models/config.model';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { Button } from '../button/button.comp';\n\nimport './table.scss';\n\ninterface IProps {\n  items: any[]\n  callbacks: {\n    delete: (item: any) => void\n    put: (item: any) => void\n    action: (item: any, action: IConfigCustomAction) => void\n  }\n  fields: IConfigDisplayField[]\n  customActions?: IConfigCustomAction[]\n}\n\nexport const Table = ({ items, fields, callbacks, customActions }: IProps) => {\n  function renderTableCell(type: TConfigDisplayField, value: any) {\n    if (value && typeof value === 'object') {\n      return 'object';\n    }\n\n    switch (type) {\n      case 'text':\n        return <span>{value}</span>;\n      case 'boolean':\n        return <div className={`bool ${value ? 'true' : 'false'}`}></div>;\n      case 'image':\n        return <img src={value} alt={value} />;\n      case 'url':\n        return <a href={value} target=\"_blank\" rel=\"noopener noreferrer\">{value}</a>;\n      case 'colorbox':\n        return <div className=\"colorbox\" style={{ backgroundColor: value }}></div>;\n      default:\n        return value;\n    }\n  }\n\n  return (\n    <div className=\"table-wrapper\">\n      <table className=\"pure-table\">\n        <thead>\n          <tr>\n            {\n              fields.map((field) => {\n                return <th key={`th_${field.name}`}>{field.label || field.name}</th>;\n              })\n            }\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            items.map((item, rowIdx) => {\n              return (\n                <tr key={`tr_${rowIdx}`}>\n                  {\n                    fields.map((field, fieldIdx) => {\n                      const value = dataHelpers.extractDataByDataPath(item, field.dataPath, field.name);\n                      return <td key={`td_${rowIdx}_${fieldIdx}`}>{renderTableCell(field.type, value)}</td>\n                    })\n                  }\n                  <td>\n                    <div className=\"actions-wrapper\">\n                      {\n                        callbacks.put &&\n                        <Button onClick={() => callbacks.put(item)} title=\"Edit\">\n                          <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\n                        </Button>\n                      }\n                      {\n                        (customActions && customActions.length > 0) &&\n                        customActions.map((action, idx) => (\n                          <Button key={`action_${rowIdx}_${idx}`} onClick={() => callbacks.action(item, action)} title={action.name}>\n                            <i className={`fa fa-${action.icon || 'cogs'}`} aria-hidden=\"true\"></i>\n                          </Button>\n                        ))\n                      }\n                      {\n                        callbacks.delete &&\n                        <Button onClick={() => callbacks.delete(item)} title=\"Delete\">\n                          <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n                        </Button>\n                      }\n                    </div>\n                  </td>\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n}","import React from 'react';\n\nimport { TConfigDisplayField, IConfigDisplayField, IConfigCustomAction } from '../../common/models/config.model';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { Button } from '../button/button.comp';\n\nimport './cards.scss';\n\ninterface IProps {\n  items: any[]\n  callbacks: {\n    delete: (item: any) => void\n    put: (item: any) => void\n    action: (item: any, action: IConfigCustomAction) => void\n  }\n  fields: IConfigDisplayField[]\n  customActions?: IConfigCustomAction[]\n}\n\nexport const Cards = ({ items, fields, callbacks, customActions }: IProps) => {\n  function renderRow(type: TConfigDisplayField, value: any) {\n    if (value && typeof value === 'object') {\n      return 'object';\n    }\n\n    switch (type) {\n      case 'text':\n        return <span>{value}</span>;\n      case 'boolean':\n        return <div className={`bool ${value ? 'true' : 'false'}`}></div>;\n      case 'image':\n        return <img src={value} alt={value} />;\n      case 'url':\n        return <a href={value} target=\"_blank\" rel=\"noopener noreferrer\">{value}</a>;\n      case 'colorbox':\n        return <div className=\"colorbox\" style={{ backgroundColor: value }}></div>;\n      default:\n        return value;\n    }\n  }\n\n  return (\n    <div className=\"cards-wrapper\">\n      {\n        items.map((item, cardIdx) => {\n          return (\n            <div className=\"card\" key={`card_${cardIdx}`}>\n              {\n                fields.map((field, fieldIdx) => {\n                  const value = dataHelpers.extractDataByDataPath(item, field.dataPath, field.name);\n                  return (\n                    <div className={`card-row ${field.type}`} key={`card_${cardIdx}_${fieldIdx}`}>\n                      {\n                        field.type !== 'image' &&\n                        <label>{field.label || field.name}: </label>\n                      }\n                      {renderRow(field.type, value)}\n                    </div>\n                  );\n                })\n              }\n              <div className=\"actions-wrapper\">\n                {\n                  callbacks.put &&\n                  <Button onClick={() => callbacks.put(item)} title=\"Edit\">\n                    <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\n                  </Button>\n                }\n                {\n                  (customActions && customActions.length > 0) &&\n                  customActions.map((action, idx) => (\n                    <Button key={`action_${cardIdx}_${idx}`} onClick={() => callbacks.action(item, action)} title={action.name}>\n                      <i className={`fa fa-${action.icon || 'cogs'}`} aria-hidden=\"true\"></i>\n                    </Button>\n                  ))\n                }\n                {\n                  callbacks.delete &&\n                  <Button onClick={() => callbacks.delete(item)} title=\"Delete\">\n                    <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n                  </Button>\n                }\n              </div>\n            </div>\n          );\n        })\n      }\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport { orderBy } from 'natural-orderby';\nimport { toast } from 'react-toastify';\n\nimport { IConfigInputField, IConfigOptionSource } from '../../common/models/config.model';\nimport { Button } from '../button/button.comp';\nimport { withAppContext } from '../withContext/withContext.comp';\nimport { IAppContext } from '../app.context';\nimport { dataHelpers } from '../../helpers/data.helpers';\n\nimport './formRow.scss';\n\ninterface IProps {\n  context: IAppContext\n  field: IConfigInputField\n  onChange: (fieldName: string, value: any, submitAfterChange?: boolean) => void\n  showReset?: boolean\n  direction?: 'row' | 'column'\n}\n\nexport const FormRow = withAppContext(({ context, field, direction, showReset, onChange }: IProps) => {\n  const [optionSources, setOptionSources] = useState<any>({});\n  const { httpService, activePage } = context;\n  const pageHeaders: any = activePage?.requestHeaders || {};\n\n  async function loadOptionSourceFromRemote(fieldName: string, optionSource: IConfigOptionSource) {\n    try {\n      const { url, dataPath, actualMethod, requestHeaders } = optionSource;\n\n      if (!url) {\n        throw new Error(`URL option source (for field \"${fieldName}\") is empty.`);\n      }\n\n      const result = await httpService.fetch({\n        method: actualMethod || 'get', \n        origUrl: url, \n        queryParams: [], \n        headers: Object.assign({}, pageHeaders,  requestHeaders || {}),\n      });\n      \n      const extractedData = dataHelpers.extractDataByDataPath(result, dataPath);\n\n      if (!extractedData || !extractedData.length) {\n        throw new Error(`Option source data is empty (for field \"${fieldName}\")`);\n      }\n\n      // Map option source to fields\n      const optionSourceData = extractedData.map((option: any, idx: number) => {\n        const { valuePath, displayPath } = optionSource;\n\n        if (typeof option === 'string') {\n          return option;\n        }\n\n        return {\n          display: displayPath && option[displayPath] ? option[displayPath] : `Option ${idx + 1}`,\n          value: valuePath && option[valuePath] ? option[valuePath] : `${idx}`,\n        };\n      });\n\n      setOptionSources({\n        ...optionSources,\n        [fieldName]: optionSourceData\n      });\n    } catch (e) {\n      toast.error(e.message);\n    }\n  }\n\n  function addItemToFieldArray(e: any, originalField: IConfigInputField) {\n    e.preventDefault();\n\n    onChange(field.name, [\n      ...(originalField.value || []),\n      ''\n    ]);\n  }\n\n  function removeItemToFieldArray(originalField: IConfigInputField, idx: number) {\n    const updatedArray = [\n      ...(originalField.value || [])\n    ];\n\n    updatedArray.splice(idx, 1);\n\n    onChange(field.name, updatedArray);\n  }\n\n  function renderArrayItems(originalField: IConfigInputField) {\n    const array: any[] = originalField.value || [];\n\n    return (\n      <div className=\"array-form\">\n        {\n          array.map((item, itemIdx) => {\n            const inputField = renderFieldInput({\n              value: item,\n              name: `${originalField.name}.${itemIdx}`,\n            } as IConfigInputField, (fieldName, value) => {\n              const updatedArray = (originalField.value || []).map((localValue: any, idx: number) => {\n                if (idx === itemIdx) {\n                  return value;\n                }\n                return localValue;\n              });\n              \n              onChange(originalField.name, updatedArray);\n            });\n\n            return (\n              <div className=\"array-form-item\" key={`array_form_${itemIdx}`}>\n                {inputField}\n                <i title=\"Clear\" onClick={() => removeItemToFieldArray(originalField, itemIdx)} aria-label=\"Remove\" className=\"clear-input fa fa-times\"></i>\n              </div>\n            )\n          })\n        }\n        <Button className=\"add-array-item\" onClick={(e) => addItemToFieldArray(e, originalField)} title=\"Add Item\">\n          <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\n        </Button>\n      </div>\n    );\n  }\n\n  function renderFieldInput(field: IConfigInputField, changeCallback: (fieldName: string, value: any, submitAfterChange?: boolean) => void) {\n    const inputProps = (defaultPlaceholder: string = '') => {\n      return {\n        value: field.value,\n        placeholder: field.placeholder || defaultPlaceholder,\n        disabled: field.readonly, \n        required: field.required,\n        onChange: (e: any) => changeCallback(field.name, e.target.value), \n      };\n    };\n\n    switch (field.type) {\n      case 'boolean':\n        return <input type=\"checkbox\" {...inputProps()} checked={field.value} onChange={(e) => changeCallback(field.name, e.target.checked, true)} />;\n      case 'select':\n        {\n          const { optionSource } = field;\n\n          if (optionSource && !optionSources[field.name]) {\n            loadOptionSourceFromRemote(field.name, optionSource);\n            return <select><option>-- Loading Options... --</option></select>\n          }\n\n          const sortBy = field.optionSource?.sortBy;\n          const finalOptions: { value: string, display: string }[] = optionSources[field.name] || field.options || [];\n          const sortedOptions = orderBy(finalOptions, typeof sortBy === 'string' ? [sortBy] : (sortBy || []));\n\n          return (\n            <select {...inputProps()}>\n              <option>-- Select --</option>\n              {\n                sortedOptions.map((option, idx) => {\n                  const key = `option_${idx}_`;\n                  if (typeof option !== 'object') {\n                    return <option key={`${key}_${option}`} value={option}>{option}</option>  \n                  }\n                  return <option key={`${key}_${option.value}`} value={option.value}>{option.display || option.value}</option>\n                })\n              }\n            </select>\n          );\n        };\n      case 'object':\n        return <textarea {...inputProps('Enter JSON...')}></textarea>;\n      case 'array': {\n        const { arrayType, value } = field;\n        if (!value || !arrayType || arrayType === 'object') {\n          return <textarea {...inputProps('Enter JSON array...')}></textarea>;\n        }\n        return renderArrayItems(field);\n      }\n      case 'long-text':\n        return <textarea {...inputProps('Enter text...')}></textarea>;\n      case 'number':\n      case 'integer':\n        return <input type=\"number\"  {...inputProps('0')} onChange={(e) => changeCallback(field.name, e.target.valueAsNumber)} />;\n      case 'color':\n        return <input type=\"color\" {...inputProps('Enter color...')}/>;\n      case 'email':\n        return <input type=\"email\" {...inputProps('Enter email...')}/>;\n      case 'password':\n        return <input type=\"password\" {...inputProps('Enter password...')}/>;\n      case 'hidden':\n        return <input type=\"hidden\" value={field.value} />;\n      case 'file':\n        return <input type=\"file\" accept={field.accept || '*'} placeholder={field.placeholder || 'Select file...'} name={field.name || 'file'} disabled={field.readonly} required={field.required} />;\n      case 'note':\n        return <p className=\"note\">{field.value}</p>;\n      case 'text':\n      default:\n        return <input type=\"text\" {...inputProps('Enter text...')}/>;\n    }\n  }\n  \n  return (\n    <div className={`form-row ${direction || 'row'}`}>\n      <label>{field.label || field.originalName}{field.required ? ' *' : ''}</label>\n      {renderFieldInput(field, onChange)}\n      {\n        (showReset && !field.readonly && field.value && field.value.length > 0) &&\n        <i title=\"Clear\" onClick={() => onChange(field.name, '', true)} aria-label=\"Clear\" className=\"clear-input fa fa-times\"></i>\n      }\n    </div>\n  );\n});","import React, { useState, useEffect } from 'react';\n\nimport { IConfigInputField } from '../../common/models/config.model';\nimport { FormRow } from '../formRow/formRow.comp';\nimport { Button } from '../button/button.comp';\n\nimport './queryParams.scss';\n\ninterface IProps {\n  initialParams: IConfigInputField[]\n  submitCallback: (queryParams: IConfigInputField[]) => void\n}\n\nexport const QueryParams = ({ initialParams, submitCallback }: IProps) => {\n  const [queryParams, setQueryParams] = useState<IConfigInputField[]>(initialParams);\n\n  function submit(e?: any) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    submitCallback(queryParams);\n  }\n\n  function formChanged(fieldName: string, value: any, submitAfterChange?: boolean) {\n    const updatedQueryParams: IConfigInputField[] = [...queryParams].map((field) => {\n      if (field.name === fieldName) {\n        field.value = value;\n      }\n\n      return field;\n    });\n\n    setQueryParams(updatedQueryParams);\n\n    if (submitAfterChange) {\n      submit();\n    }\n  }\n\n  useEffect(() => {\n    setQueryParams(initialParams);\n  }, [initialParams]);\n\n  if (!queryParams.length) {\n    return <React.Fragment></React.Fragment>;\n  }\n\n  return (\n    <section className=\"query-params-form\">\n      <h5>Query Params:</h5>\n      <form onSubmit={submit}>\n        {\n          queryParams.map((queryParam, idx) => {\n            return (\n              <FormRow \n                key={`query_param_${idx}`}\n                field={queryParam} \n                onChange={formChanged}\n                showReset={!queryParam.type || queryParam.type === 'text'}\n              />\n            );\n          })\n        }\n        <Button type=\"submit\" onClick={submit}>Submit</Button>\n      </form>\n    </section>\n  );\n};","import React, { Component, RefObject, ReactChild } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './popup.scss';\n\ninterface IPopupProps {\n  className?: string\n  style?: any\n  show: boolean\n  closeCallback: any\n  children: ReactChild\n  refCallback?: string | ((instance: HTMLDivElement | null) => void) | RefObject<HTMLDivElement> | null | undefined\n}\n\nlet portalRoot: HTMLDivElement = document.getElementById('popup-portal') as HTMLDivElement;\nif (!portalRoot) {\n  portalRoot = document.createElement('div');\n  portalRoot.setAttribute('id', 'popup-portal');\n  document.body.append(portalRoot);\n}\n\nclass PortalPopup extends Component {\n  private el: HTMLElement;\n\n  constructor(props: any) {\n    super(props);\n    \n    this.el = document.createElement('div');\n  }\n  \n  componentDidMount = () => {\n    portalRoot.appendChild(this.el);\n  }\n  \n  componentWillUnmount = () => {\n    portalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.el);\n  }\n}\n\nexport class Popup extends Component<IPopupProps> {\n  render() {\n    const style: any = Object.assign({}, { display: this.props.show ? 'block' : 'none' }, this.props.style || {});\n\n    return (\n      <PortalPopup>\n        {\n          this.props.show ? \n          <div className={`popup ${this.props.className || ''}`} style={style}>\n            <div className=\"overlay\" onClick={(e: any) => this.props.closeCallback(e)}></div>\n            <div className=\"popup-content\" ref={this.props.refCallback}>\n              {this.props.children}\n              <button title=\"Close\" className=\"close-popup\" onClick={(e: any) => this.props.closeCallback(e)}>\n                <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n              </button>\n            </div>\n          </div> :\n          null\n        }\n      </PortalPopup>\n    );\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this._handleKeyDown.bind(this));\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this._handleKeyDown.bind(this));\n  }\n\n  _handleKeyDown = (e: KeyboardEvent) => {\n    const { show, closeCallback } = this.props;\n    \n    if (show && e.keyCode === 27) {\n      closeCallback(e);\n    }\n  }\n};","import { IConfigInputField } from '../common/models/config.model';\n\nclass FileHelpers {\n\n  public isMultipartForm(fields: IConfigInputField[]): boolean {\n    for (const fieldIndex in fields) {\n      let field = fields[fieldIndex];\n\n      if (field.type === 'file') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  \n}\n\nexport const fileHelpers = new FileHelpers();","import React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { Popup } from '../popup/popup.comp';\nimport { IConfigInputField, IConfigGetSingleMethod } from '../../common/models/config.model';\nimport { FormRow } from '../formRow/formRow.comp';\nimport { Button } from '../button/button.comp';\nimport { Loader } from '../loader/loader.comp';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { fileHelpers } from '../../helpers/file.helpers';\nimport { IAppContext } from '../app.context';\nimport { withAppContext } from '../withContext/withContext.comp';\n\nimport './formPopup.scss';\n\nconst flatten = require('flat');\nconst unflatten = require('flat').unflatten;\n\ninterface IProps {\n  context: IAppContext\n  title: string\n  fields: IConfigInputField[]\n  rawData?: any\n  getSingleConfig?: IConfigGetSingleMethod\n  closeCallback: (reloadData: boolean) => void\n  submitCallback: (body: any, containFiles: boolean) => void\n}\n\nexport const FormPopup = withAppContext(({ context, title, fields, rawData, getSingleConfig, submitCallback, closeCallback }: IProps) => {\n  const fieldsCopy: IConfigInputField[] = JSON.parse(JSON.stringify(fields));\n  const { httpService, activePage } = context;\n  const [loading, setLoading] = useState<boolean>(true);\n  const [formFields, setFormFields] = useState<IConfigInputField[]>([]);\n  const pageHeaders: any = activePage?.requestHeaders || {};\n\n  async function initFormFields() {\n    let finalRawData: any = rawData || {};\n\n    if (getSingleConfig && getSingleConfig.url) {\n      try {\n        const { url, requestHeaders, actualMethod, dataPath, queryParams } = getSingleConfig;\n        const result = await httpService.fetch({\n          method: actualMethod || 'get', \n          origUrl: url, \n          queryParams, \n          headers: Object.assign({}, pageHeaders,  requestHeaders || {}),\n          rawData,\n        });\n        \n        const extractedData = dataHelpers.extractDataByDataPath(result, dataPath);\n\n        if (extractedData && typeof extractedData === 'object') {\n          finalRawData = extractedData;\n        }\n      } catch (e) {\n        console.error('Could not load single item\\'s data.', e);\n        toast.error('Could not load single item\\'s data.');\n      }\n    }\n\n    const flattenData = flatten(finalRawData || {});\n\n    setFormFields(fieldsCopy.map((field) => {\n      let key = field.name;\n\n      field.originalName = field.name; \n      \n      if (field.dataPath) {\n        key = `${field.dataPath}.${field.name}`;\n      }\n  \n      // Changing field name to include datapath\n      // This will use us later for unflatten the final object\n      field.name = key;\n  \n      if (dataHelpers.checkIfFieldIsObject(field)) {\n        if (finalRawData[key] || field.value) {\n          field.value = JSON.stringify(finalRawData[key] || field.value, null, '  ') || '';\n        }\n        return field;\n      }\n\n      if (field.type === 'array') {\n        field.value = finalRawData[key] || field.value || [];\n        return field;\n      }\n  \n      if (flattenData[key]) {\n        field.value = flattenData[key];\n      } else {\n        // important in order to prevent controlled / uncontrolled components error\n        field.value = field.value || '';\n      }\n  \n      return field;\n    }));\n\n    setLoading(false);\n  }\n\n  async function submitForm(e: any) {\n    e.preventDefault();\n\n    const finalObject: any = {};\n    const formData = new FormData();\n    const containFiles: boolean = fileHelpers.isMultipartForm(formFields);\n    let validationError = null;\n\n    formFields.forEach((field) => {\n      if (field.type === 'file') {\n        const fileInput: any = document.querySelector(`input[name=\"${field.name || 'file'}\"]`) as HTMLInputElement;\n        \n        if (fileInput.files.length > 0) {\n          const firstFile = fileInput.files[0];\n          formData.append(field.name || 'file', firstFile, firstFile.name);\n        }\n        return;\n      }\n\n      finalObject[field.name] = field.value;\n\n      if (containFiles) {\n        formData.append(field.name, field.value);\n      }\n\n      if (field.required && field.type !== 'boolean' && !field.value) {\n        validationError = 'Please fill up all required fields.';\n      }\n\n      if (dataHelpers.checkIfFieldIsObject(field) && field.value) {\n        try {\n          finalObject[field.name] = JSON.parse(field.value);\n        } catch (e) {\n          validationError = `Invalid JSON for field \"${field.name}\".`;\n        }\n      }\n\n      if (field.type === 'boolean') {\n        finalObject[field.name] = field.value || false;\n      }\n\n      if (field.type === 'encode') {\n        finalObject[field.name] = encodeURIComponent(field.value);\n      }\n    });\n\n    if (validationError) {\n      toast.error(validationError);\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const body = containFiles ? formData : unflatten(finalObject);\n      await submitCallback(body, containFiles);\n      \n      toast.success('Great Success!');\n      \n      closeCallback(true);\n    } catch (e) {\n      toast.error(e.message);\n    }\n\n    setLoading(false);\n  }\n\n  function formChanged(fieldName: string, value: any) {\n    let updatedFormFields: IConfigInputField[] = JSON.parse(JSON.stringify(formFields));\n    \n    updatedFormFields = updatedFormFields.map((field: IConfigInputField) => {\n      if (field.name === fieldName) {\n        field.value = value;\n      }\n\n      return field;\n    });\n\n    setFormFields(updatedFormFields);\n  }\n\n  useEffect(() => {\n    initFormFields();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Popup\n      show={true}\n      className=\"form-popup\"\n      closeCallback={() => closeCallback(false)}\n    >\n      <React.Fragment>\n        <h2>{title}</h2>\n        <section>\n          {\n            loading ? \n            <Loader /> :\n            <form onSubmit={submitForm}>\n              {\n                formFields.map((field, idx) => {\n                  return (\n                    <FormRow \n                      key={`field_${idx}`}\n                      field={field} \n                      onChange={formChanged}\n                      showReset={!field.type || field.type === 'text'}\n                    />\n                  );\n                })\n              }\n              <div className=\"buttons-wrapper center\">\n                <Button type=\"submit\" onClick={submitForm} color=\"green\">Submit</Button>\n              </div>\n            </form>\n          }\n        </section>\n      </React.Fragment>\n    </Popup>\n  );\n});","import React from 'react';\n\nimport './filterField.scss';\n\ninterface IProps {\n  onChange: (filter: string) => void\n}\n\nexport const FilterField = ({ onChange }: IProps) => {\n  return (\n    <section className=\"filter-wrapper\">\n      <h5>Filter:</h5>\n      <div className=\"form-row\">\n        <input type=\"text\" placeholder=\"Search...\" onChange={(e) => onChange(e.target.value.toLowerCase())} />\n      </div>\n    </section>\n  );\n};","import React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport * as QueryString from 'query-string';\nimport { toast } from 'react-toastify';\nimport { orderBy } from 'natural-orderby';\n\nimport { IAppContext } from '../app.context';\nimport { IConfigPage, IConfigMethods, IConfigGetAllMethod, IConfigPostMethod, IConfigPutMethod, IConfigDeleteMethod, IConfigInputField, IConfigCustomAction, IConfigGetSingleMethod } from '../../common/models/config.model';\nimport { withAppContext } from '../withContext/withContext.comp';\nimport { Loader } from '../loader/loader.comp';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { Table } from '../table/table.comp';\nimport { Cards } from '../cards/cards.comp';\nimport { QueryParams } from '../queryParams/queryParams.comp';\nimport { Button } from '../button/button.comp';\nimport { FormPopup } from '../formPopup/formPopup.comp';\nimport { FilterField } from '../filterField/filterField.comp';\n\nimport './page.scss';\n\ninterface IProps {\n  context: IAppContext\n}\n\ninterface IPopupProps {\n  type: 'add' | 'update' | 'action'\n  title: string\n  config: IConfigPostMethod | IConfigPutMethod\n  submitCallback: (body: any, containFiles: boolean) => void\n  getSingleConfig?: IConfigGetSingleMethod\n  rawData?: {}\n}\n\nconst PageComp = ({ context }: IProps) => {\n  const { page } = useParams();\n  const { push, location } = useHistory();\n  const { activePage, error, setError, httpService } = context;\n  const pageHeaders: any = activePage?.requestHeaders || {};\n  const pageMethods: IConfigMethods | undefined = activePage?.methods;\n  const customActions: IConfigCustomAction[] = activePage?.customActions || [];\n  const getAllConfig: IConfigGetAllMethod | undefined = pageMethods?.getAll;\n  const getSingleConfig: IConfigGetSingleMethod | undefined = pageMethods?.getSingle;\n  const postConfig: IConfigPostMethod | undefined = pageMethods?.post;\n  const putConfig: IConfigPutMethod | undefined = pageMethods?.put;\n  const deleteConfig: IConfigDeleteMethod | undefined = pageMethods?.delete;\n  const [loading, setLoading] = useState<boolean>(false);\n  const [openedPopup, setOpenedPopup] = useState<null | IPopupProps>(null);\n  const [queryParams, setQueryParams] = useState<IConfigInputField[]>(getAllConfig?.queryParams || []);\n  const [items, setItems] = useState<any[]>([]);\n  const [filter, setFilter] = useState<string>('');\n\n  \n  function closeFormPopup(refreshData: boolean = false) {\n    setOpenedPopup(null);\n\n    if (refreshData === true) {\n      getAllRequest();\n    }\n  }\n\n  async function openEditPopup(rawData: any) {\n    const params: IPopupProps = { \n      rawData,\n      type: 'update', \n      title: 'Update Item', \n      config: putConfig as IConfigPutMethod,\n      getSingleConfig, \n      submitCallback: async (body: any, containFiles: boolean) => {\n        return await updateItem(body, rawData, containFiles);\n      }\n    };\n\n    setOpenedPopup(params);\n  }\n\n  function openCustomActionPopup(rawData: any, action: IConfigCustomAction) {\n    const params: IPopupProps = { \n      rawData,\n      type: 'action', \n      title: action.name || 'Custom Action', \n      config: action as IConfigCustomAction, \n      submitCallback: async (body: any, containFiles: boolean) => {\n        return await performAction(body, rawData, action, containFiles);\n      }\n    };\n\n    setOpenedPopup(params);\n  }\n\n  async function performAction(body: any, rawData: any, action: IConfigCustomAction, containFiles: boolean) {\n    const { url, requestHeaders, actualMethod } = action;\n    \n    return await httpService.fetch({\n      method: actualMethod || 'put', \n      origUrl: url, \n      rawData,\n      body: containFiles ? body : JSON.stringify(body),\n      headers: {\n        ...pageHeaders,\n        ...(requestHeaders || {}),\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\n      },\n      responseType: 'boolean'\n    });\n  }\n\n  function extractQueryParams(): IConfigInputField[] {\n    const parsedParams = QueryString.parse(location.search);\n    const finalQueryParams: IConfigInputField[] = (getAllConfig?.queryParams || []).map((queryParam) => {\n      if (typeof parsedParams[queryParam.name] !== 'undefined') {\n        queryParam.value = queryParam.type === 'boolean' ? (parsedParams[queryParam.name] === 'true') : decodeURIComponent(parsedParams[queryParam.name] as any);\n      } else {\n        queryParam.value = queryParam.value || '';\n      }\n      return queryParam;\n    }); \n\n    return finalQueryParams\n  }\n\n  async function getAllRequest() {\n    setLoading(true);\n    setError(null);\n\n    try {\n      if (!getAllConfig) {\n        throw new Error('Get all method is not defined.');\n      }\n      \n      const { url, requestHeaders, actualMethod, dataPath, sortBy } = getAllConfig;\n      const result = await httpService.fetch({\n        method: actualMethod || 'get', \n        origUrl: url, \n        queryParams: extractQueryParams(), \n        headers: Object.assign({}, pageHeaders, requestHeaders || {})\n      });\n      const extractedData = dataHelpers.extractDataByDataPath(result, dataPath);\n\n      if (!extractedData) {\n        throw new Error('Could not extract data from response.');\n      }\n\n      if (!Array.isArray(extractedData)) {\n        throw new Error('Extracted data is invalid.');\n      }\n\n      const orderedItems = orderBy(extractedData, typeof sortBy === 'string' ? [sortBy] : (sortBy || []));\n      \n      setItems(orderedItems);\n    } catch (e) {\n      setError(e.message);\n    }\n\n    setLoading(false);\n  }\n\n  async function addItem(body: any, containFiles?: boolean) {\n    if (!postConfig) {\n      throw new Error('Post method is not defined.');\n    }\n      \n    const { url, requestHeaders, actualMethod } = postConfig;\n    \n    return await httpService.fetch({\n      method: actualMethod || 'post', \n      origUrl: url, \n      body: containFiles ? body : JSON.stringify(body),\n      headers: {\n        ...pageHeaders,\n        ...(requestHeaders || {}),\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\n      },\n      responseType: 'boolean'\n    });\n  }\n\n  async function updateItem(body: any, rawData: any, containFiles?: boolean) {\n    if (!putConfig) {\n      throw new Error('Put method is not defined.');\n    }\n    \n    const { url, requestHeaders, actualMethod } = putConfig;\n    \n    return await httpService.fetch({\n      method: actualMethod || 'put', \n      origUrl: url, \n      rawData,\n      body: containFiles ? body : JSON.stringify(body),\n      headers: {\n        ...pageHeaders,\n        ...(requestHeaders || {}),\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\n      },\n      responseType: 'boolean'\n    });\n  }\n\n  async function deleteItem(item: any) {\n    const approved: boolean = window.confirm('Are you sure you want to delete this item?');\n    \n    if (!approved) {\n      return;\n    }\n\n    try {\n      if (!deleteConfig) {\n        throw new Error('Delete method is not defined.');\n      }\n      \n      const { url, requestHeaders, actualMethod } = deleteConfig;\n      const success = await httpService.fetch({\n        method: actualMethod || 'delete', \n        origUrl: url, \n        rawData: item,\n        headers: Object.assign({}, pageHeaders, requestHeaders || {}), \n        responseType: 'boolean'\n      });\n\n      if (success) {\n        getAllRequest();\n      }\n    } catch (e) {\n      toast.error(e.message);\n    }\n  }\n\n  function submitQueryParams(updatedParams: IConfigInputField[]) {\n    setQueryParams(updatedParams);\n\n    if (loading) {\n      return;\n    }\n\n    // Building query string\n    const queryState: string = queryParams.map((queryParam, idx) => {\n      return `${idx === 0 ? '?' : ''}${queryParam.name}=${encodeURIComponent(queryParam.value || '')}`;\n    }).join('&');\n\n    // Pushing query state to url\n    push(queryState);\n  }\n\n  function renderTable() {\n    if (loading) {\n      return <Loader />;\n    }\n\n    const fields = getAllConfig?.fields || getAllConfig?.display?.fields || [];\n    const fieldsToFilter = fields.filter((field) => (field.filterable)).map((field) => field.name);\n    let filteredItems = items;\n    \n    if (filter && fieldsToFilter.length) {\n      filteredItems = items.filter((item) => {\n        let passFilter = false;\n        fieldsToFilter.forEach((fieldName) => {\n          const value = item[fieldName];\n          if (typeof value === 'string' && value.toLowerCase().indexOf(filter) >= 0) {\n            passFilter = true;\n          }\n        })\n        return passFilter;\n      });\n    }\n\n    if (!filteredItems.length) {\n      return <div className=\"app-error\">Nothing to see here. Result is empty.</div>;\n    }\n\n    if (getAllConfig?.display.type === 'cards') {\n      return (\n        <Cards \n          callbacks={{\n            delete: deleteConfig ? deleteItem : () => {},\n            put: putConfig ? openEditPopup : () => {},\n            action: customActions.length ? openCustomActionPopup : () => {},\n          }}\n          fields={fields}\n          items={filteredItems} \n          customActions={customActions}\n        />\n      );\n    }\n\n    return (\n      <Table \n        callbacks={{\n          delete: deleteConfig ? deleteItem : () => {},\n          put: putConfig ? openEditPopup : () => {},\n          action: customActions.length ? openCustomActionPopup : () => {},\n        }}\n        fields={fields}\n        items={filteredItems} \n        customActions={customActions}\n      />\n    );\n  }\n\n  function renderPageContent() {\n    const fields = getAllConfig?.fields || getAllConfig?.display?.fields || [];\n    const fieldsToFilter = fields.filter((field) => (field.filterable)).map((field) => field.name);\n\n    return (\n      <React.Fragment>\n        <QueryParams \n          initialParams={queryParams}\n          submitCallback={submitQueryParams}\n        />\n        {\n          fieldsToFilter.length &&\n          <FilterField onChange={setFilter} />\n        }\n        {\n          error ? \n          <div className=\"app-error\">{error}</div> :\n          renderTable()\n        }\n      </React.Fragment>\n    )\n  }\n\n  useEffect(() => {\n    const nextActivePage: IConfigPage | null = context?.config?.pages?.filter((p, pIdx) => p.id === page || (pIdx + 1) === parseInt(page || ''))[0] || null;\n    context.setActivePage(nextActivePage);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [page]);\n  \n  useEffect(() => {\n    setQueryParams(extractQueryParams());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activePage]);\n\n  useEffect(() => {\n    // Load data when query params changed\n    getAllRequest();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [queryParams]);\n\n  return (\n    <div className=\"app-page\">\n      <header className=\"app-page-header\">\n        <hgroup>\n          <h2>{activePage?.name}</h2>\n          {\n            activePage?.description &&\n            <h4>{activePage?.description}</h4>\n          }\n        </hgroup>\n        {\n          postConfig &&\n          <Button className=\"add-item\" color=\"green\" onClick={() => setOpenedPopup({ type: 'add', title: 'Add Item', config: postConfig, submitCallback: addItem })}>+ Add Item</Button>\n        }\n      </header>\n      <main className=\"app-page-content\">\n        {renderPageContent()}\n      </main>\n      {\n        openedPopup &&\n        <FormPopup\n          title={openedPopup.title}\n          closeCallback={closeFormPopup}\n          submitCallback={openedPopup.submitCallback}\n          fields={openedPopup.config?.fields || []}\n          rawData={openedPopup.rawData}\n          getSingleConfig={openedPopup.getSingleConfig}\n        />\n      }\n    </div>\n  );\n}\n\nexport const Page = withAppContext(PageComp);","import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { IAppContext } from '../app.context';\nimport { withAppContext } from '../withContext/withContext.comp';\nimport { Button } from '../button/button.comp';\n\nimport './navigation.scss';\n\ninterface IProps {\n  context: IAppContext\n}\n\nconst NavigationComp = ({ context: { config } }: IProps) => {\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n\n  return (\n    <nav className=\"app-nav\">\n      <Button className=\"app-nav-opener\" onClick={() => setIsOpened(!isOpened)}>\n        {\n          isOpened ? \n          <i className=\"fa fa-times\" aria-hidden=\"true\"></i> : \n          <i className=\"fa fa-bars\" aria-hidden=\"true\"></i>\n        }\n      </Button>\n\n      <div className={`app-nav-wrapper ${isOpened ? 'opened' : ''}`}>\n        <div className=\"app-nav-links\">\n          {\n            (config?.pages || []).map((page, idx) => (\n              <NavLink to={`/${page.id || idx + 1}`} activeClassName=\"active\" key={`page_${idx}`} onClick={() => setIsOpened(false)}>{page.name}</NavLink>\n            ))\n          }\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport const Navigation = withAppContext(NavigationComp);","import React from 'react';\nimport { ICustomStyles } from '../../common/models/config.model';\n\ninterface IProps {\n  styles: ICustomStyles\n}\n\nexport const CustomStyles = ({ styles }: IProps) => {\n  const cssVars = styles.vars || {};\n  const arr = [];\n  \n  for (const key in cssVars) {\n    arr.push(`--${key}: ${(cssVars as any)[key]}`);\n  }\n\n  return (\n    <style dangerouslySetInnerHTML={{ __html: `\n      :root {\n        ${arr.join(';')}\n      }\n    ` }}>\n    </style>\n  );\n};","import React, { useEffect, useState } from 'react';\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport ConfigService from '../services/config.service';\nimport { IConfig, IConfigPage } from '../common/models/config.model';\nimport { Page } from '../components/page/page.comp';\nimport { Navigation } from '../components/navigation/navigation.comp';\nimport { AppContext } from './app.context';\nimport HttpService from '../services/http.service';\n\nimport './app.scss';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { CustomStyles } from './customStyles/customStyles.comp';\n\nconst httpService = new HttpService();\nconst defaultAppName: string = 'RESTool App';\n\nfunction changeFavicon(src: string) {\n  const link = document.createElement('link');\n  const oldLink = document.getElementById('favicon');\n  link.id = 'favicon';\n  link.rel = 'shortcut icon';\n  link.href = src;\n  if (oldLink) {\n   document.head.removeChild(oldLink);\n  }\n  document.head.appendChild(link);\n }\n\nfunction App() {\n  const [firstLoad, setFirstLoad] = useState<boolean>(true);\n  const [config, setConfig] = useState<IConfig | null>(null);\n  const [activePage, setActivePage] = useState<IConfigPage | null>(config?.pages?.[0] || null);\n  const [error, setError] = useState<string | null>(null);\n\n  async function loadConfig(url: string): Promise<void> {\n    try {\n      const remoteConfig: IConfig = await ConfigService.getRemoteConfig(url);\n      \n      // Setting global config for httpService\n      httpService.baseUrl = remoteConfig.baseUrl || '';\n      httpService.errorMessageDataPath = remoteConfig.errorMessageDataPath || '';\n      httpService.unauthorizedRedirectUrl = remoteConfig.unauthorizedRedirectUrl || '';\n      httpService.requestHeaders = remoteConfig.requestHeaders || {};\n      document.title = remoteConfig.name || defaultAppName;\n\n      if (remoteConfig?.favicon) {\n        changeFavicon(remoteConfig.favicon);\n      }\n\n      if (config?.remoteUrl) {\n        return await loadConfig(config.remoteUrl);\n      }\n\n      setConfig(remoteConfig);\n    } catch (e) {\n      console.error('Could not load config file', e);\n    }\n    \n    setFirstLoad(false);\n  }\n\n  function scrollToTop(scrollDuration: number = 250) {\n    var cosParameter = window.scrollY / 2,\n    scrollCount = 0,\n    oldTimestamp = performance.now();\n    \n    function step (newTimestamp: number) {\n        scrollCount += Math.PI / (scrollDuration / (newTimestamp - oldTimestamp));\n        \n        if (scrollCount >= Math.PI) { \n          window.scrollTo(0, 0);\n        }\n\n        if (window.scrollY === 0) {\n          return;\n        }\n\n        window.scrollTo(0, Math.round(cosParameter + cosParameter * Math.cos(scrollCount)));\n        oldTimestamp = newTimestamp;\n        window.requestAnimationFrame(step);\n    }\n\n    window.requestAnimationFrame(step);\n  }\n\n  useEffect(() => {\n    loadConfig('./config.json');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const { isValid, errorMessage } = ConfigService.validateConfig(config);\n    if (!isValid) {\n      setError(errorMessage);\n      return;\n    }\n  }, [config]);\n\n  const appName: string = config?.name || defaultAppName;\n\n  return (\n    <div className=\"restool-app\">\n      {\n        !config ? \n        <div className=\"app-error\">\n          {firstLoad ? 'Loading Configuration...' : 'Could not find config file.'}\n        </div> :\n        <AppContext.Provider value={{ config, activePage, setActivePage, error, setError, httpService }}>\n          {\n            config.customStyles &&\n            <CustomStyles \n              styles={config.customStyles} \n            />\n          }\n          <Router>\n            <aside>\n              <h1 title={appName} onClick={() => scrollToTop()}>{appName}</h1>\n              {\n                <Navigation />\n              }\n            </aside>\n            {\n              config &&\n              <Switch>\n                <Route exact path=\"/:page\" component={Page} />\n                <Redirect path=\"/\" to={`/${config?.pages?.[0]?.id || '1'}`} />\n              </Switch>\n            }\n            <ToastContainer \n              position={toast.POSITION.TOP_CENTER} \n              autoClose={4000} \n              draggable={false} \n            />\n          </Router>\n        </AppContext.Provider>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}