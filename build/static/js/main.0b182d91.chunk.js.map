{"version":3,"sources":["helpers/data.helpers.ts","services/http.service.ts","services/config.service.ts","components/app.context.ts","components/withContext/withContext.comp.tsx","components/loader/loader.comp.tsx","components/button/button.comp.tsx","components/table/table.comp.tsx","components/cards/cards.comp.tsx","components/formRow/formRow.comp.tsx","components/queryParams/queryParams.comp.tsx","components/popup/popup.comp.tsx","helpers/file.helpers.ts","components/formPopup/formPopup.comp.tsx","components/page/page.comp.tsx","components/navigation/navigation.comp.tsx","components/app.tsx","serviceWorker.ts","index.tsx"],"names":["dataHelpers","data","dataPath","attr","extractedData","digProps","split","prop","field","type","arrayType","HttpService","baseUrl","unauthorizedRedirectUrl","errorMessageDataPath","this","url","indexOf","rawData","outputUrl","Object","keys","forEach","key","urlParamName","replace","queryParams","length","replaceParamsInUrl","params","param","name","value","urlReplaceOnly","push","firstSeparator","join","reqUrl","urlIsAbsolute","origUrl","buildUrl","method","headers","body","undefined","res","errorMessage","json","path","dataAtPath","extractDataByDataPath","status","statusText","redirectUrl","encodeURIComponent","document","location","href","Error","getErrorMessage","responseType","fetch","assign","ok","text","handleError","buildRequest","makeRequest","httpService","HTTPService","config","isValid","AppContext","React","createContext","activePage","error","setError","setActivePage","withAppContext","Component","props","Consumer","context","Loader","className","Button","color","children","Table","items","fields","callbacks","customActions","map","label","item","rowIdx","fieldIdx","src","alt","target","rel","style","backgroundColor","renderTableCell","put","onClick","title","aria-hidden","action","idx","icon","delete","Cards","cardIdx","renderRow","FormRow","direction","showReset","onChange","useState","optionSources","setOptionSources","renderArrayItems","originalField","array","itemIdx","inputField","renderFieldInput","fieldName","updatedArray","localValue","splice","removeItemToFieldArray","aria-label","e","preventDefault","addItemToFieldArray","changeCallback","inputProps","defaultPlaceholder","placeholder","disabled","readonly","required","checked","optionSource","a","async","actualMethod","result","optionSourceData","option","valuePath","displayPath","display","toast","message","loadOptionSourceFromRemote","sortBy","finalOptions","options","sortedOptions","orderBy","valueAsNumber","accept","originalName","QueryParams","initialParams","submitCallback","setQueryParams","submit","formChanged","submitAfterChange","updatedQueryParams","useEffect","onSubmit","queryParam","Fragment","portalRoot","getElementById","createElement","setAttribute","append","PortalPopup","el","componentDidMount","appendChild","componentWillUnmount","removeChild","ReactDOM","createPortal","Popup","_handleKeyDown","show","closeCallback","keyCode","ref","refCallback","addEventListener","bind","removeEventListener","fileHelpers","fieldIndex","flatten","require","unflatten","FormPopup","getSingleConfig","fieldsCopy","JSON","parse","stringify","loading","setLoading","formFields","setFormFields","submitForm","finalObject","formData","FormData","containFiles","isMultipartForm","validationError","checkIfFieldIsObject","fileInput","querySelector","files","firstFile","success","updatedFormFields","finalRawData","requestHeaders","console","flattenData","initFormFields","Page","page","useParams","useHistory","pageMethods","methods","getAllConfig","getAll","getSingle","postConfig","post","putConfig","deleteConfig","openedPopup","setOpenedPopup","setItems","openEditPopup","updateItem","openCustomActionPopup","performAction","extractQueryParams","parsedParams","QueryString","search","decodeURIComponent","getAllRequest","Array","isArray","orderedItems","addItem","deleteItem","window","confirm","submitQueryParams","updatedParams","queryState","nextActivePage","pages","filter","p","pIdx","id","parseInt","description","renderTable","refreshData","Navigation","isOpened","setIsOpened","to","activeClassName","defaultAppName","changeFavicon","link","oldLink","head","App","firstLoad","setFirstLoad","setConfig","loadConfig","ConfigService","getRemoteConfig","remoteConfig","favicon","remoteUrl","validateConfig","appName","Provider","scrollDuration","cosParameter","scrollY","scrollCount","oldTimestamp","performance","now","requestAnimationFrame","step","newTimestamp","Math","PI","scrollTo","round","cos","scrollToTop","exact","component","position","POSITION","TOP_CENTER","autoClose","draggable","Boolean","hostname","match","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b182d91.chunk.js","sourcesContent":["import { IConfigInputField } from \"../common/models/config.model\";\n\nclass DataHelpers {\n\n  public extractDataByDataPath(data: any, dataPath: string, attr: string | null = null) {\n    if (!data || !dataPath) {\n      if (attr) {\n        return data[attr];\n      }\n      return data;\n    }\n\t\n    let extractedData: any = data;\n    const digProps: string[] = dataPath.split('.');\n\n    for (let prop of digProps) {\n      if (typeof extractedData[prop] !== 'undefined') {\n        extractedData = extractedData[prop];\n      } else {\n        return null;\n      }\n    }\n\n    if (!extractedData) {\n      return null;\n    }\n\n    if (attr) {\n      return extractedData[attr];\n    }\n\n    return extractedData;\n  }\n\n  public checkIfFieldIsObject(field: IConfigInputField): boolean {\n    if (field.type === 'object') {\n      return true;\n    }\n\n    if (field.type === 'array') {\n      if (!field.arrayType || field.arrayType === 'object') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nexport const dataHelpers = new DataHelpers();","import { TConfigMethod, IConfigInputField } from '../common/models/config.model';\nimport { dataHelpers } from '../helpers/data.helpers';\n\nexport type ResponseType = 'json' | 'text' | 'boolean' | 'status';\n\nexport interface IFetchParams {\n  origUrl: string\n  method?: TConfigMethod\n  headers?: any\n  queryParams?: IConfigInputField[]\n  rawData?: any\n  body?: any\n  responseType?: ResponseType\n}\n\nclass HttpService {\n  public baseUrl: string;\n  public unauthorizedRedirectUrl: string;\n  public errorMessageDataPath: string | string[];\n\n  constructor(baseUrl: string = '', unauthorizedRedirectUrl: string = '', errorMessageDataPath: string = '') {\n    this.baseUrl = baseUrl || '';\n    this.unauthorizedRedirectUrl = unauthorizedRedirectUrl || '';\n    this.errorMessageDataPath = errorMessageDataPath || '';\n  }\n\n  private urlIsAbsolute(url: string) {\n    if (url.indexOf('http') === 0 || url.indexOf('https') === 0) {\n      return true;\n    }\n    return false;\n  }\n\n  private replaceParamsInUrl(url: string, rawData?: any): string {\n    if (!rawData || typeof rawData !== 'object') {\n      return url;\n    }\n\n    let outputUrl = url;\n    \n    Object.keys(rawData).forEach((key) => {\n      const urlParamName = `:${key}`;\n      outputUrl = outputUrl.replace(urlParamName, rawData[key] as string);\n    });\n\n    return outputUrl;\n  }\n\n  private buildUrl(url: string, queryParams: IConfigInputField[] = [], rawData?: any): string {\n    if (!queryParams || !queryParams.length) {\n      return this.replaceParamsInUrl(url, rawData);\n    }\n\n    let outputUrl = url;\n    const params = [];\n\n    for (let param of queryParams) {\n      if (!param.name || typeof param.value === 'undefined') {\n        continue;\n      }\n\n      // TODO: Add docs to \"urlReplaceOnly\"\n      if (param.urlReplaceOnly) {\n        const urlParamName = `:${param.name}`;\n        outputUrl = outputUrl.replace(urlParamName, param.value as string);\n      } else {\n        params.push(`${param.name}=${param.value || ''}`);\n      }\n    }\n\n    if (params.length) {\n      const firstSeparator = url.indexOf('?') >= 0 ? '&' : '?';\n      return outputUrl + firstSeparator + params.join('&');\n    }\n\n    return outputUrl;\n  }\n\n  private buildRequest(params: IFetchParams): { url: string, params: any } {\n    const reqUrl: string = this.urlIsAbsolute(params.origUrl) ? params.origUrl : this.baseUrl + params.origUrl;\n    const finalUrl: string = this.buildUrl(reqUrl, params.queryParams, params.rawData);\n    const requestParams = {\n      method: params.method || 'get',\n      headers: params.headers || {},\n      body: params.method === 'post' || params.method === 'put' ? params.body : undefined\n    };\n\n    return {\n      url: finalUrl,\n      params: requestParams\n    };\n  }\n\n  private async getErrorMessage(res: Response | any): Promise<string> {\n    let errorMessage: string = '';\n\n    try {\n      const body = await res.json();\n\n      for (const path of this.errorMessageDataPath) {\n        const dataAtPath = dataHelpers.extractDataByDataPath(body, path);\n\n        if (dataAtPath) {\n          errorMessage = dataAtPath;\n        }\n      }\n    } catch {}\n\n    errorMessage = `${res.status} - ${res.statusText || ''}`;\n\n    return errorMessage;\n  }\n\n  private async handleError(res: Response) {\n    // In case response status is \"Unauthorized\", redirect to relevant url\n    if (res.status === 401 && this.unauthorizedRedirectUrl) {\n      const redirectUrl: string = this.unauthorizedRedirectUrl.replace(':returnUrl', encodeURIComponent(document.location.href));\n      document.location.href = redirectUrl;\n      return;\n    }\n\n    throw new Error(await this.getErrorMessage(res));\n  }\n\n  private async makeRequest(url: string, params: any = {}, responseType: ResponseType = 'json') {\n    const res: Response = await fetch(url, Object.assign({}, params, {}));\n    \n    if (res.ok) {\n      switch (responseType) {\n        case 'json':\n          return await res.json();  \n        case 'text':\n          return await res.text();\n        case 'boolean':\n          return true;\n        default:\n          return true;\n      }\n    }\n\n    await this.handleError(res);\n  }\n\n  public async fetch({ method, origUrl, queryParams, rawData, body, headers, responseType }: IFetchParams) {\n    const { url, params } = this.buildRequest({ method, origUrl, queryParams, rawData, body, headers });\n    return await this.makeRequest(url, params, responseType);\n  }\n}\n\nexport default HttpService;","import HTTPService from './http.service';\nimport { IConfig } from '../common/models/config.model';\n\nconst httpService: HTTPService = new HTTPService();\n\nclass ConfigService extends HTTPService {\n\n  public async getRemoteConfig(url: string) {\n    return await httpService.fetch({\n      origUrl: url,\n    });\n  }\n\n  public validateConfig(config: IConfig | null): { isValid: boolean, errorMessage: string | null } {\n    // TODO: Validate mandatory fields in config file\n    return {\n      isValid: true,\n      errorMessage: null\n    };\n  }\n\n}\n\nexport default new ConfigService();","import React from 'react';\nimport { IConfig, IConfigPage } from '../common/models/config.model';\nimport HttpService from '../services/http.service';\n\nexport interface IAppContext {\n  config: IConfig | null\n  activePage: IConfigPage | null\n  error: string | null\n  setError: (error: string | null) => void\n  setActivePage: (activePage: IConfigPage | null) => void\n  httpService: HttpService\n}\n\nexport const AppContext = React.createContext<IAppContext>({\n  config: null,\n  activePage: null,\n  error: null,\n  setError: () => {},\n  setActivePage: () => {},\n  httpService: new HttpService()\n});","import React from 'react';\nimport { AppContext } from '../app.context';\n\nexport const withAppContext = (Component: any) => {\n  return (props: any) => (\n    <AppContext.Consumer>    \n      {(context) => {\n        return <Component {...props} context={context} />\n      }}\n    </AppContext.Consumer>\n  );\n};","import React from 'react';\n\nimport './loader.scss';\n\nexport const Loader = () => {\n  return (\n    <div className=\"app-loader cp-spinner cp-balls small\"></div>\n  );\n};","import React from 'react';\n\nimport './button.scss';\n\ninterface IProps {\n  children: any\n  type?: 'submit' | 'button' | 'reset'\n  title?: string\n  className?: string\n  onClick?: (e: any) => void\n  color?: 'gray' | 'blue' | 'green' | 'red'\n}\n\nexport const Button = (props: IProps) => {\n  return (\n    <button {...props} className={`button ${props.className || ''} ${props.color || ''}`}>{props.children}</button>\n  );\n};","import React from 'react';\n\nimport { TConfigDisplayField, IConfigDisplayField, IConfigCustomAction } from '../../common/models/config.model';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { Button } from '../button/button.comp';\n\nimport './table.scss';\n\ninterface IProps {\n  items: any[]\n  callbacks: {\n    delete: (item: any) => void\n    put: (item: any) => void\n    action: (item: any, action: IConfigCustomAction) => void\n  }\n  fields: IConfigDisplayField[]\n  customActions?: IConfigCustomAction[]\n}\n\nexport const Table = ({ items, fields, callbacks, customActions }: IProps) => {\n  function renderTableCell(type: TConfigDisplayField, value: any) {\n    if (value && typeof value === 'object') {\n      return 'object';\n    }\n\n    switch (type) {\n      case 'text':\n        return <span>{value}</span>;\n      case 'boolean':\n        return <div className={`bool ${value ? 'true' : 'false'}`}></div>;\n      case 'image':\n        return <img src={value} alt={value} />;\n      case 'url':\n        return <a href={value} target=\"_blank\" rel=\"noopener noreferrer\">{value}</a>;\n      case 'colorbox':\n        return <div className=\"colorbox\" style={{ backgroundColor: value }}></div>;\n      default:\n        return value;\n    }\n  }\n\n  return (\n    <div className=\"table-wrapper\">\n      <table className=\"pure-table\">\n        <thead>\n          <tr>\n            {\n              fields.map((field) => {\n                return <th key={`th_${field.name}`}>{field.label || field.name}</th>;\n              })\n            }\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            items.map((item, rowIdx) => {\n              return (\n                <tr key={`tr_${rowIdx}`}>\n                  {\n                    fields.map((field, fieldIdx) => {\n                      const value = dataHelpers.extractDataByDataPath(item, field.dataPath, field.name);\n                      return <td key={`td_${rowIdx}_${fieldIdx}`}>{renderTableCell(field.type, value)}</td>\n                    })\n                  }\n                  <td>\n                    <div className=\"actions-wrapper\">\n                      {\n                        callbacks.put &&\n                        <Button onClick={() => callbacks.put(item)} title=\"Edit\">\n                          <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\n                        </Button>\n                      }\n                      {\n                        (customActions && customActions.length > 0) &&\n                        customActions.map((action, idx) => (\n                          <Button key={`action_${rowIdx}_${idx}`} onClick={() => callbacks.action(item, action)} title={action.name}>\n                            <i className={`fa fa-${action.icon || 'cogs'}`} aria-hidden=\"true\"></i>\n                          </Button>\n                        ))\n                      }\n                      {\n                        callbacks.delete &&\n                        <Button onClick={() => callbacks.delete(item)} title=\"Delete\">\n                          <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n                        </Button>\n                      }\n                    </div>\n                  </td>\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n}","import React from 'react';\n\nimport { TConfigDisplayField, IConfigDisplayField, IConfigCustomAction } from '../../common/models/config.model';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { Button } from '../button/button.comp';\n\nimport './cards.scss';\n\ninterface IProps {\n  items: any[]\n  callbacks: {\n    delete: (item: any) => void\n    put: (item: any) => void\n    action: (item: any, action: IConfigCustomAction) => void\n  }\n  fields: IConfigDisplayField[]\n  customActions?: IConfigCustomAction[]\n}\n\nexport const Cards = ({ items, fields, callbacks, customActions }: IProps) => {\n  function renderRow(type: TConfigDisplayField, value: any) {\n    if (value && typeof value === 'object') {\n      return 'object';\n    }\n\n    switch (type) {\n      case 'text':\n        return <span>{value}</span>;\n      case 'boolean':\n        return <div className={`bool ${value ? 'true' : 'false'}`}></div>;\n      case 'image':\n        return <img src={value} alt={value} />;\n      case 'url':\n        return <a href={value} target=\"_blank\" rel=\"noopener noreferrer\">{value}</a>;\n      case 'colorbox':\n        return <div className=\"colorbox\" style={{ backgroundColor: value }}></div>;\n      default:\n        return value;\n    }\n  }\n\n  return (\n    <div className=\"cards-wrapper\">\n      {\n        items.map((item, cardIdx) => {\n          return (\n            <div className=\"card\" key={`card_${cardIdx}`}>\n              {\n                fields.map((field, fieldIdx) => {\n                  const value = dataHelpers.extractDataByDataPath(item, field.dataPath, field.name);\n                  return (\n                    <div className={`card-row ${field.type}`} key={`card_${cardIdx}_${fieldIdx}`}>\n                      {\n                        field.type !== 'image' &&\n                        <label>{field.label || field.name}: </label>\n                      }\n                      {renderRow(field.type, value)}\n                    </div>\n                  );\n                })\n              }\n              <div className=\"actions-wrapper\">\n                {\n                  callbacks.put &&\n                  <Button onClick={() => callbacks.put(item)} title=\"Edit\">\n                    <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\n                  </Button>\n                }\n                {\n                  (customActions && customActions.length > 0) &&\n                  customActions.map((action, idx) => (\n                    <Button key={`action_${cardIdx}_${idx}`} onClick={() => callbacks.action(item, action)} title={action.name}>\n                      <i className={`fa fa-${action.icon || 'cogs'}`} aria-hidden=\"true\"></i>\n                    </Button>\n                  ))\n                }\n                {\n                  callbacks.delete &&\n                  <Button onClick={() => callbacks.delete(item)} title=\"Delete\">\n                    <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n                  </Button>\n                }\n              </div>\n            </div>\n          );\n        })\n      }\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport { orderBy } from 'natural-orderby';\nimport { toast } from 'react-toastify';\n\nimport { IConfigInputField, IConfigOptionSource } from '../../common/models/config.model';\nimport { Button } from '../button/button.comp';\nimport { withAppContext } from '../withContext/withContext.comp';\nimport { IAppContext } from '../app.context';\nimport { dataHelpers } from '../../helpers/data.helpers';\n\nimport './formRow.scss';\n\ninterface IProps {\n  context: IAppContext\n  field: IConfigInputField\n  onChange: (fieldName: string, value: any, submitAfterChange?: boolean) => void\n  showReset?: boolean\n  direction?: 'row' | 'column'\n}\n\nexport const FormRow = withAppContext(({ context, field, direction, showReset, onChange }: IProps) => {\n  const [optionSources, setOptionSources] = useState<any>({});\n  const { httpService } = context;\n  \n  async function loadOptionSourceFromRemote(fieldName: string, optionSource: IConfigOptionSource) {\n    try {\n      const { url, dataPath, actualMethod } = optionSource;\n\n      if (!url) {\n        throw new Error(`URL option source (for field \"${fieldName}\") is empty.`);\n      }\n\n      const result = await httpService.fetch({\n        method: actualMethod || 'get', \n        origUrl: url, \n        queryParams: [], \n        headers: {},\n      });\n      \n      const extractedData = dataHelpers.extractDataByDataPath(result, dataPath);\n\n      if (!extractedData || !extractedData.length) {\n        throw new Error(`Option source data is empty (for field \"${fieldName}\")`);\n      }\n\n      // Map option source to fields\n      const optionSourceData = extractedData.map((option: any, idx: number) => {\n        const { valuePath, displayPath } = optionSource;\n\n        if (typeof option === 'string') {\n          return option;\n        }\n\n        return {\n          display: displayPath && option[displayPath] ? option[displayPath] : `Option ${idx + 1}`,\n          value: valuePath && option[valuePath] ? option[valuePath] : `${idx}`,\n        };\n      });\n\n      setOptionSources({\n        ...optionSources,\n        [fieldName]: optionSourceData\n      });\n    } catch (e) {\n      toast.error(e.message);\n    }\n  }\n\n  function addItemToFieldArray(e: any, originalField: IConfigInputField) {\n    e.preventDefault();\n\n    onChange(field.name, [\n      ...(originalField.value || []),\n      ''\n    ]);\n  }\n\n  function removeItemToFieldArray(originalField: IConfigInputField, idx: number) {\n    const updatedArray = [\n      ...(originalField.value || [])\n    ];\n\n    updatedArray.splice(idx, 1);\n\n    onChange(field.name, updatedArray);\n  }\n\n  function renderArrayItems(originalField: IConfigInputField) {\n    const array: any[] = originalField.value || [];\n\n    return (\n      <div className=\"array-form\">\n        {\n          array.map((item, itemIdx) => {\n            const inputField = renderFieldInput({\n              value: item,\n              name: `${originalField.name}.${itemIdx}`,\n            } as IConfigInputField, (fieldName, value) => {\n              const updatedArray = (originalField.value || []).map((localValue: any, idx: number) => {\n                if (idx === itemIdx) {\n                  return value;\n                }\n                return localValue;\n              });\n              \n              onChange(originalField.name, updatedArray);\n            });\n\n            return (\n              <div className=\"array-form-item\" key={`array_form_${itemIdx}`}>\n                {inputField}\n                <i title=\"Clear\" onClick={() => removeItemToFieldArray(originalField, itemIdx)} aria-label=\"Remove\" className=\"clear-input fa fa-times\"></i>\n              </div>\n            )\n          })\n        }\n        <Button className=\"add-array-item\" onClick={(e) => addItemToFieldArray(e, originalField)} title=\"Add Item\">\n          <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\n        </Button>\n      </div>\n    );\n  }\n\n  function renderFieldInput(field: IConfigInputField, changeCallback: (fieldName: string, value: any, submitAfterChange?: boolean) => void) {\n    const inputProps = (defaultPlaceholder: string = '') => {\n      return {\n        value: field.value,\n        placeholder: field.placeholder || defaultPlaceholder,\n        disabled: field.readonly, \n        required: field.required,\n        onChange: (e: any) => changeCallback(field.name, e.target.value), \n      };\n    };\n\n    switch (field.type) {\n      case 'boolean':\n        return <input type=\"checkbox\" {...inputProps()} checked={field.value} onChange={(e) => changeCallback(field.name, e.target.checked, true)} />;\n      case 'select':\n        {\n          const { optionSource } = field;\n\n          if (optionSource && !optionSources[field.name]) {\n            loadOptionSourceFromRemote(field.name, optionSource);\n            return <select><option>-- Loading Options... --</option></select>\n          }\n\n          const sortBy = field.optionSource?.sortBy;\n          const finalOptions: { value: string, display: string }[] = optionSources[field.name] || field.options || [];\n          const sortedOptions = orderBy(finalOptions, typeof sortBy === 'string' ? [sortBy] : (sortBy || []));\n\n          return (\n            <select {...inputProps()}>\n              <option>-- Select --</option>\n              {\n                sortedOptions.map((option, idx) => {\n                  const key = `option_${idx}_`;\n                  if (typeof option !== 'object') {\n                    return <option key={`${key}_${option}`} value={option}>{option}</option>  \n                  }\n                  return <option key={`${key}_${option.value}`} value={option.value}>{option.display || option.value}</option>\n                })\n              }\n            </select>\n          );\n        };\n      case 'object':\n        return <textarea {...inputProps('Enter JSON...')}></textarea>;\n      case 'array': {\n        const { arrayType, value } = field;\n        if (!value || !arrayType || arrayType === 'object') {\n          return <textarea {...inputProps('Enter JSON array...')}></textarea>;\n        }\n        return renderArrayItems(field);\n      }\n      case 'long-text':\n        return <textarea {...inputProps('Enter text...')}></textarea>;\n      case 'number':\n      case 'integer':\n        return <input type=\"number\"  {...inputProps('0')} onChange={(e) => changeCallback(field.name, e.target.valueAsNumber)} />;\n      case 'color':\n        return <input type=\"color\" {...inputProps('Enter color...')}/>;\n      case 'email':\n        return <input type=\"email\" {...inputProps('Enter email...')}/>;\n      case 'password':\n        return <input type=\"password\" {...inputProps('Enter password...')}/>;\n      case 'hidden':\n        return <input type=\"hidden\" value={field.value} />;\n      case 'file':\n        return <input type=\"file\" accept={field.accept || '*'} placeholder={field.placeholder || 'Select file...'} name={field.name || 'file'} disabled={field.readonly} required={field.required} />;\n      case 'note':\n        return <p className=\"note\">{field.value}</p>;\n      case 'text':\n      default:\n        return <input type=\"text\" {...inputProps('Enter text...')}/>;\n    }\n  }\n  \n  return (\n    <div className={`form-row ${direction || 'row'}`}>\n      <label>{field.label || field.originalName}{field.required ? ' *' : ''}</label>\n      {renderFieldInput(field, onChange)}\n      {\n        (showReset && !field.readonly && field.value && field.value.length > 0) &&\n        <i title=\"Clear\" onClick={() => onChange(field.name, '', true)} aria-label=\"Clear\" className=\"clear-input fa fa-times\"></i>\n      }\n    </div>\n  );\n});","import React, { useState, useEffect } from 'react';\n\nimport { IConfigInputField } from '../../common/models/config.model';\nimport { FormRow } from '../formRow/formRow.comp';\nimport { Button } from '../button/button.comp';\n\nimport './queryParams.scss';\n\ninterface IProps {\n  initialParams: IConfigInputField[]\n  submitCallback: (queryParams: IConfigInputField[]) => void\n}\n\nexport const QueryParams = ({ initialParams, submitCallback }: IProps) => {\n  const [queryParams, setQueryParams] = useState<IConfigInputField[]>(initialParams);\n\n  function submit(e?: any) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    submitCallback(queryParams);\n  }\n\n  function formChanged(fieldName: string, value: any, submitAfterChange?: boolean) {\n    const updatedQueryParams: IConfigInputField[] = [...queryParams].map((field) => {\n      if (field.name === fieldName) {\n        field.value = value;\n      }\n\n      return field;\n    });\n\n    setQueryParams(updatedQueryParams);\n\n    if (submitAfterChange) {\n      submit();\n    }\n  }\n\n  useEffect(() => {\n    setQueryParams(initialParams);\n  }, [initialParams]);\n\n  if (!queryParams.length) {\n    return <React.Fragment></React.Fragment>;\n  }\n\n  return (\n    <section className=\"query-params-form\">\n      <h5>Query Params:</h5>\n      <form onSubmit={submit}>\n        {\n          queryParams.map((queryParam, idx) => {\n            return (\n              <FormRow \n                key={`query_param_${idx}`}\n                field={queryParam} \n                onChange={formChanged}\n                showReset={!queryParam.type || queryParam.type === 'text'}\n              />\n            );\n          })\n        }\n        <Button type=\"submit\" onClick={submit}>Submit</Button>\n      </form>\n    </section>\n  );\n};","import React, { Component, RefObject, ReactChild } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './popup.scss';\n\ninterface IPopupProps {\n  className?: string\n  style?: any\n  show: boolean\n  closeCallback: any\n  children: ReactChild\n  refCallback?: string | ((instance: HTMLDivElement | null) => void) | RefObject<HTMLDivElement> | null | undefined\n}\n\nlet portalRoot: HTMLDivElement = document.getElementById('popup-portal') as HTMLDivElement;\nif (!portalRoot) {\n  portalRoot = document.createElement('div');\n  portalRoot.setAttribute('id', 'popup-portal');\n  document.body.append(portalRoot);\n}\n\nclass PortalPopup extends Component {\n  private el: HTMLElement;\n\n  constructor(props: any) {\n    super(props);\n    \n    this.el = document.createElement('div');\n  }\n  \n  componentDidMount = () => {\n    portalRoot.appendChild(this.el);\n  }\n  \n  componentWillUnmount = () => {\n    portalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.el);\n  }\n}\n\nexport class Popup extends Component<IPopupProps> {\n  render() {\n    const style: any = Object.assign({}, { display: this.props.show ? 'block' : 'none' }, this.props.style || {});\n\n    return (\n      <PortalPopup>\n        {\n          this.props.show ? \n          <div className={`popup ${this.props.className || ''}`} style={style}>\n            <div className=\"overlay\" onClick={(e: any) => this.props.closeCallback(e)}></div>\n            <div className=\"popup-content\" ref={this.props.refCallback}>\n              {this.props.children}\n              <button title=\"Close\" className=\"close-popup\" onClick={(e: any) => this.props.closeCallback(e)}>\n                <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n              </button>\n            </div>\n          </div> :\n          null\n        }\n      </PortalPopup>\n    );\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this._handleKeyDown.bind(this));\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this._handleKeyDown.bind(this));\n  }\n\n  _handleKeyDown = (e: KeyboardEvent) => {\n    const { show, closeCallback } = this.props;\n    \n    if (show && e.keyCode === 27) {\n      closeCallback(e);\n    }\n  }\n};","import { IConfigInputField } from '../common/models/config.model';\n\nclass FileHelpers {\n\n  public isMultipartForm(fields: IConfigInputField[]): boolean {\n    for (const fieldIndex in fields) {\n      let field = fields[fieldIndex];\n\n      if (field.type === 'file') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  \n}\n\nexport const fileHelpers = new FileHelpers();","import React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { Popup } from '../popup/popup.comp';\nimport { IConfigInputField, IConfigGetSingleMethod } from '../../common/models/config.model';\nimport { FormRow } from '../formRow/formRow.comp';\nimport { Button } from '../button/button.comp';\nimport { Loader } from '../loader/loader.comp';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { fileHelpers } from '../../helpers/file.helpers';\nimport { IAppContext } from '../app.context';\nimport { withAppContext } from '../withContext/withContext.comp';\n\nimport './formPopup.scss';\n\nconst flatten = require('flat');\nconst unflatten = require('flat').unflatten;\n\ninterface IProps {\n  context: IAppContext\n  title: string\n  fields: IConfigInputField[]\n  rawData?: any\n  getSingleConfig?: IConfigGetSingleMethod\n  closeCallback: (reloadData: boolean) => void\n  submitCallback: (body: any, containFiles: boolean) => void\n}\n\nexport const FormPopup = withAppContext(({ context, title, fields, rawData, getSingleConfig, submitCallback, closeCallback }: IProps) => {\n  const fieldsCopy: IConfigInputField[] = JSON.parse(JSON.stringify(fields));\n  const { httpService } = context;\n  const [loading, setLoading] = useState<boolean>(true);\n  const [formFields, setFormFields] = useState<IConfigInputField[]>([]);\n\n  async function initFormFields() {\n    let finalRawData: any = rawData || {};\n\n    if (getSingleConfig && getSingleConfig.url) {\n      try {\n        const { url, requestHeaders, actualMethod, dataPath, queryParams } = getSingleConfig;\n        const result = await httpService.fetch({\n          method: actualMethod || 'get', \n          origUrl: url, \n          queryParams, \n          headers: requestHeaders,\n          rawData,\n        });\n        \n        const extractedData = dataHelpers.extractDataByDataPath(result, dataPath);\n\n        if (extractedData && typeof extractedData === 'object') {\n          finalRawData = extractedData;\n        }\n      } catch (e) {\n        console.error('Could not load single item\\'s data.', e);\n        toast.error('Could not load single item\\'s data.');\n      }\n    }\n\n    const flattenData = flatten(finalRawData || {});\n\n    setFormFields(fieldsCopy.map((field) => {\n      let key = field.name;\n\n      field.originalName = field.name; \n      \n      if (field.dataPath) {\n        key = `${field.dataPath}.${field.name}`;\n      }\n  \n      // Changing field name to include datapath\n      // This will use us later for unflatten the final object\n      field.name = key;\n  \n      if (dataHelpers.checkIfFieldIsObject(field)) {\n        if (finalRawData[key] || field.value) {\n          field.value = JSON.stringify(finalRawData[key] || field.value, null, '  ') || '';\n        }\n        return field;\n      }\n\n      if (field.type === 'array') {\n        field.value = finalRawData[key] || field.value || [];\n        return field;\n      }\n  \n      if (flattenData[key]) {\n        field.value = flattenData[key];\n      } else {\n        // important in order to prevent controlled / uncontrolled components error\n        field.value = field.value || '';\n      }\n  \n      return field;\n    }));\n\n    setLoading(false);\n  }\n\n  async function submitForm(e: any) {\n    e.preventDefault();\n\n    const finalObject: any = {};\n    const formData = new FormData();\n    const containFiles: boolean = fileHelpers.isMultipartForm(formFields);\n    let validationError = null;\n\n    formFields.forEach((field) => {\n      if (field.type === 'file') {\n        const fileInput: any = document.querySelector(`input[name=\"${field.name || 'file'}\"]`) as HTMLInputElement;\n        \n        if (fileInput.files.length > 0) {\n          const firstFile = fileInput.files[0];\n          formData.append(field.name || 'file', firstFile, firstFile.name);\n        }\n        return;\n      }\n\n      finalObject[field.name] = field.value;\n\n      if (containFiles) {\n        formData.append(field.name, field.value);\n      }\n\n      if (field.required && !field.value) {\n        validationError = 'Please fill up all required fields.';\n      }\n\n      if (dataHelpers.checkIfFieldIsObject(field) && field.value) {\n        try {\n          finalObject[field.name] = JSON.parse(field.value);\n        } catch (e) {\n          validationError = `Invalid JSON for field \"${field.name}\".`;\n        }\n      }\n\n      if (field.type === 'encode') {\n        finalObject[field.name] = encodeURIComponent(field.value);\n      }\n    });\n\n    if (validationError) {\n      toast.error(validationError);\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const body = containFiles ? formData : unflatten(finalObject);\n      await submitCallback(body, containFiles);\n      \n      toast.success('Great Success!');\n      \n      closeCallback(true);\n    } catch (e) {\n      toast.error(e.message);\n    }\n\n    setLoading(false);\n  }\n\n  function formChanged(fieldName: string, value: any) {\n    let updatedFormFields: IConfigInputField[] = JSON.parse(JSON.stringify(formFields));\n    \n    updatedFormFields = updatedFormFields.map((field: IConfigInputField) => {\n      if (field.name === fieldName) {\n        field.value = value;\n      }\n\n      return field;\n    });\n\n    setFormFields(updatedFormFields);\n  }\n\n  useEffect(() => {\n    initFormFields();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Popup\n      show={true}\n      className=\"form-popup\"\n      closeCallback={() => closeCallback(false)}\n    >\n      <React.Fragment>\n        <h2>{title}</h2>\n        <section>\n          {\n            loading ? \n            <Loader /> :\n            <form onSubmit={submitForm}>\n              {\n                formFields.map((field, idx) => {\n                  return (\n                    <FormRow \n                      key={`field_${idx}`}\n                      field={field} \n                      onChange={formChanged}\n                      showReset={!field.type || field.type === 'text'}\n                    />\n                  );\n                })\n              }\n              <div className=\"buttons-wrapper center\">\n                <Button type=\"submit\" onClick={submitForm} color=\"green\">Submit</Button>\n              </div>\n            </form>\n          }\n        </section>\n      </React.Fragment>\n    </Popup>\n  );\n});","import React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport * as QueryString from 'query-string';\nimport { toast } from 'react-toastify';\nimport { orderBy } from 'natural-orderby';\n\nimport { IAppContext } from '../app.context';\nimport { IConfigPage, IConfigMethods, IConfigGetAllMethod, IConfigPostMethod, IConfigPutMethod, IConfigDeleteMethod, IConfigInputField, IConfigCustomAction, IConfigGetSingleMethod } from '../../common/models/config.model';\nimport { withAppContext } from '../withContext/withContext.comp';\nimport { Loader } from '../loader/loader.comp';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { Table } from '../table/table.comp';\nimport { Cards } from '../cards/cards.comp';\nimport { QueryParams } from '../queryParams/queryParams.comp';\nimport { Button } from '../button/button.comp';\nimport { FormPopup } from '../formPopup/formPopup.comp';\n\nimport './page.scss';\n\ninterface IProps {\n  context: IAppContext\n}\n\ninterface IPopupProps {\n  type: 'add' | 'update' | 'action'\n  title: string\n  config: IConfigPostMethod | IConfigPutMethod\n  submitCallback: (body: any, containFiles: boolean) => void\n  getSingleConfig?: IConfigGetSingleMethod\n  rawData?: {}\n}\n\nconst PageComp = ({ context }: IProps) => {\n  const { page } = useParams();\n  const { push, location } = useHistory();\n  const { activePage, error, setError, httpService } = context;\n  const pageMethods: IConfigMethods | undefined = activePage?.methods;\n  const customActions: IConfigCustomAction[] = activePage?.customActions || [];\n  const getAllConfig: IConfigGetAllMethod | undefined = pageMethods?.getAll;\n  const getSingleConfig: IConfigGetSingleMethod | undefined = pageMethods?.getSingle;\n  const postConfig: IConfigPostMethod | undefined = pageMethods?.post;\n  const putConfig: IConfigPutMethod | undefined = pageMethods?.put;\n  const deleteConfig: IConfigDeleteMethod | undefined = pageMethods?.delete;\n  const [loading, setLoading] = useState<boolean>(false);\n  const [openedPopup, setOpenedPopup] = useState<null | IPopupProps>(null);\n  const [queryParams, setQueryParams] = useState<IConfigInputField[]>(getAllConfig?.queryParams || []);\n  const [items, setItems] = useState<any[]>([]);\n  \n  function closeFormPopup(refreshData: boolean = false) {\n    setOpenedPopup(null);\n\n    if (refreshData === true) {\n      getAllRequest();\n    }\n  }\n\n  async function openEditPopup(rawData: any) {\n    const params: IPopupProps = { \n      rawData,\n      type: 'update', \n      title: 'Update Item', \n      config: putConfig as IConfigPutMethod,\n      getSingleConfig, \n      submitCallback: async (body: any, containFiles: boolean) => {\n        return await updateItem(body, rawData, containFiles);\n      }\n    };\n\n    setOpenedPopup(params);\n  }\n\n  function openCustomActionPopup(rawData: any, action: IConfigCustomAction) {\n    const params: IPopupProps = { \n      rawData,\n      type: 'action', \n      title: action.name || 'Custom Action', \n      config: action as IConfigCustomAction, \n      submitCallback: async (body: any, containFiles: boolean) => {\n        return await performAction(body, rawData, action, containFiles);\n      }\n    };\n\n    setOpenedPopup(params);\n  }\n\n  async function performAction(body: any, rawData: any, action: IConfigCustomAction, containFiles: boolean) {\n    const { url, requestHeaders, actualMethod } = action;\n    \n    return await httpService.fetch({\n      method: actualMethod || 'put', \n      origUrl: url, \n      rawData,\n      body: containFiles ? body : JSON.stringify(body),\n      headers: {\n        ...requestHeaders,\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\n      },\n      responseType: 'boolean'\n    });\n  }\n\n  function extractQueryParams(): IConfigInputField[] {\n    const parsedParams = QueryString.parse(location.search);\n    const finalQueryParams: IConfigInputField[] = (getAllConfig?.queryParams || []).map((queryParam) => {\n      if (typeof parsedParams[queryParam.name] !== 'undefined') {\n        queryParam.value = queryParam.type === 'boolean' ? (parsedParams[queryParam.name] === 'true') : decodeURIComponent(parsedParams[queryParam.name] as any);\n      } else {\n        queryParam.value = queryParam.value || '';\n      }\n      return queryParam;\n    }); \n\n    return finalQueryParams\n  }\n\n  async function getAllRequest() {\n    setLoading(true);\n    setError(null);\n\n    try {\n      if (!getAllConfig) {\n        throw new Error('Get all method is not defined.');\n      }\n      \n      const { url, requestHeaders, actualMethod, dataPath, sortBy } = getAllConfig;\n      const result = await httpService.fetch({\n        method: actualMethod || 'get', \n        origUrl: url, \n        queryParams: extractQueryParams(), \n        headers: requestHeaders\n      });\n      const extractedData = dataHelpers.extractDataByDataPath(result, dataPath);\n\n      if (!extractedData) {\n        throw new Error('Could not extract data from response.');\n      }\n\n      if (!Array.isArray(extractedData)) {\n        throw new Error('Extracted data is invalid.');\n      }\n\n      const orderedItems = orderBy(extractedData, typeof sortBy === 'string' ? [sortBy] : (sortBy || []));\n      \n      setItems(orderedItems);\n    } catch (e) {\n      setError(e.message);\n    }\n\n    setLoading(false);\n  }\n\n  async function addItem(body: any, containFiles?: boolean) {\n    if (!postConfig) {\n      throw new Error('Post method is not defined.');\n    }\n      \n    const { url, requestHeaders, actualMethod } = postConfig;\n    \n    return await httpService.fetch({\n      method: actualMethod || 'post', \n      origUrl: url, \n      body: containFiles ? body : JSON.stringify(body),\n      headers: {\n        ...requestHeaders,\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\n      },\n      responseType: 'boolean'\n    });\n  }\n\n  async function updateItem(body: any, rawData: any, containFiles?: boolean) {\n    if (!putConfig) {\n      throw new Error('Put method is not defined.');\n    }\n    \n    const { url, requestHeaders, actualMethod } = putConfig;\n    \n    return await httpService.fetch({\n      method: actualMethod || 'put', \n      origUrl: url, \n      rawData,\n      body: containFiles ? body : JSON.stringify(body),\n      headers: {\n        ...requestHeaders,\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\n      },\n      responseType: 'boolean'\n    });\n  }\n\n  async function deleteItem(item: any) {\n    const approved: boolean = window.confirm('Are you sure you want to delete this item?');\n    \n    if (!approved) {\n      return;\n    }\n\n    try {\n      if (!deleteConfig) {\n        throw new Error('Delete method is not defined.');\n      }\n      \n      const { url, requestHeaders, actualMethod } = deleteConfig;\n      const success = await httpService.fetch({\n        method: actualMethod || 'delete', \n        origUrl: url, \n        rawData: item,\n        headers: requestHeaders, \n        responseType: 'boolean'\n      });\n\n      if (success) {\n        getAllRequest();\n      }\n    } catch (e) {\n      toast.error(e.message);\n    }\n  }\n\n  function submitQueryParams(updatedParams: IConfigInputField[]) {\n    setQueryParams(updatedParams);\n\n    if (loading) {\n      return;\n    }\n\n    // Building query string\n    const queryState: string = queryParams.map((queryParam, idx) => {\n      return `${idx === 0 ? '?' : ''}${queryParam.name}=${encodeURIComponent(queryParam.value || '')}`;\n    }).join('&');\n\n    // Pushing query state to url\n    push(queryState);\n  }\n\n  function renderTable() {\n    if (loading) {\n      return <Loader />;\n    }\n\n    if (!items.length) {\n      return <div className=\"app-error\">Nothing to see here. Result is empty.</div>;\n    }\n\n    const fields = getAllConfig?.fields || getAllConfig?.display?.fields || [];\n\n    if (getAllConfig?.display.type === 'cards') {\n      return (\n        <Cards \n          callbacks={{\n            delete: deleteConfig ? deleteItem : () => {},\n            put: putConfig ? openEditPopup : () => {},\n            action: customActions.length ? openCustomActionPopup : () => {},\n          }}\n          fields={fields}\n          items={items} \n          customActions={customActions}\n        />\n      );\n    }\n\n    return (\n      <Table \n        callbacks={{\n          delete: deleteConfig ? deleteItem : () => {},\n          put: putConfig ? openEditPopup : () => {},\n          action: customActions.length ? openCustomActionPopup : () => {},\n        }}\n        fields={fields}\n        items={items} \n        customActions={customActions}\n      />\n    );\n  }\n\n  function renderPageContent() {\n    return (\n      <React.Fragment>\n        <QueryParams \n          initialParams={queryParams}\n          submitCallback={submitQueryParams}\n        />\n        {\n          error ? \n          <div className=\"app-error\">{error}</div> :\n          renderTable()\n        }\n      </React.Fragment>\n    )\n  }\n\n  useEffect(() => {\n    const nextActivePage: IConfigPage | null = context?.config?.pages?.filter((p, pIdx) => p.id === page || (pIdx + 1) === parseInt(page || ''))[0] || null;\n    context.setActivePage(nextActivePage);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [page]);\n  \n  useEffect(() => {\n    setQueryParams(extractQueryParams());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activePage]);\n\n  useEffect(() => {\n    // Load data when query params changed\n    getAllRequest();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [queryParams]);\n\n  return (\n    <div className=\"app-page\">\n      <header className=\"app-page-header\">\n        <hgroup>\n          <h2>{activePage?.name}</h2>\n          {\n            activePage?.description &&\n            <h4>{activePage?.description}</h4>\n          }\n        </hgroup>\n        {\n          postConfig &&\n          <Button className=\"add-item\" color=\"green\" onClick={() => setOpenedPopup({ type: 'add', title: 'Add Item', config: postConfig, submitCallback: addItem })}>+ Add Item</Button>\n        }\n      </header>\n      <main className=\"app-page-content\">\n        {renderPageContent()}\n      </main>\n      {\n        openedPopup &&\n        <FormPopup\n          title={openedPopup.title}\n          closeCallback={closeFormPopup}\n          submitCallback={openedPopup.submitCallback}\n          fields={openedPopup.config?.fields || []}\n          rawData={openedPopup.rawData}\n          getSingleConfig={openedPopup.getSingleConfig}\n        />\n      }\n    </div>\n  );\n}\n\nexport const Page = withAppContext(PageComp);","import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { IAppContext } from '../app.context';\nimport { withAppContext } from '../withContext/withContext.comp';\nimport { Button } from '../button/button.comp';\n\nimport './navigation.scss';\n\ninterface IProps {\n  context: IAppContext\n}\n\nconst NavigationComp = ({ context: { config } }: IProps) => {\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n\n  return (\n    <nav className=\"app-nav\">\n      <Button className=\"app-nav-opener\" onClick={() => setIsOpened(!isOpened)}>\n        {\n          isOpened ? \n          <i className=\"fa fa-times\" aria-hidden=\"true\"></i> : \n          <i className=\"fa fa-bars\" aria-hidden=\"true\"></i>\n        }\n      </Button>\n\n      <div className={`app-nav-wrapper ${isOpened ? 'opened' : ''}`}>\n        <div className=\"app-nav-links\">\n          {\n            (config?.pages || []).map((page, idx) => (\n              <NavLink to={`/${page.id || idx + 1}`} activeClassName=\"active\" key={`page_${idx}`} onClick={() => setIsOpened(false)}>{page.name}</NavLink>\n            ))\n          }\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport const Navigation = withAppContext(NavigationComp);","import React, { useEffect, useState } from 'react';\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport ConfigService from '../services/config.service';\nimport { IConfig, IConfigPage } from '../common/models/config.model';\nimport { Page } from '../components/page/page.comp';\nimport { Navigation } from '../components/navigation/navigation.comp';\nimport { AppContext } from './app.context';\nimport HttpService from '../services/http.service';\n\nimport './app.scss';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst httpService = new HttpService();\nconst defaultAppName: string = 'RESTool App';\n\nfunction changeFavicon(src: string) {\n  const link = document.createElement('link');\n  const oldLink = document.getElementById('favicon');\n  link.id = 'favicon';\n  link.rel = 'shortcut icon';\n  link.href = src;\n  if (oldLink) {\n   document.head.removeChild(oldLink);\n  }\n  document.head.appendChild(link);\n }\n\nfunction App() {\n  const [firstLoad, setFirstLoad] = useState<boolean>(true);\n  const [config, setConfig] = useState<IConfig | null>(null);\n  const [activePage, setActivePage] = useState<IConfigPage | null>(config?.pages?.[0] || null);\n  const [error, setError] = useState<string | null>(null);\n\n  async function loadConfig(url: string): Promise<void> {\n    try {\n      const remoteConfig: IConfig = await ConfigService.getRemoteConfig(url);\n      \n      // Setting global config for httpService\n      httpService.baseUrl = remoteConfig.baseUrl || '';\n      httpService.errorMessageDataPath = remoteConfig.errorMessageDataPath || '';\n      httpService.unauthorizedRedirectUrl = remoteConfig.unauthorizedRedirectUrl || '';\n      document.title = remoteConfig.name || defaultAppName;\n\n      if (remoteConfig?.favicon) {\n        changeFavicon(remoteConfig.favicon);\n      }\n\n      if (config?.remoteUrl) {\n        return await loadConfig(config.remoteUrl);\n      }\n\n      setFirstLoad(false);\n      setConfig(remoteConfig);\n    } catch (e) {\n      console.error('Could not load config file', e);\n    }\n  }\n\n  function scrollToTop(scrollDuration: number = 250) {\n    var cosParameter = window.scrollY / 2,\n    scrollCount = 0,\n    oldTimestamp = performance.now();\n    \n    function step (newTimestamp: number) {\n        scrollCount += Math.PI / (scrollDuration / (newTimestamp - oldTimestamp));\n        \n        if (scrollCount >= Math.PI) { \n          window.scrollTo(0, 0);\n        }\n\n        if (window.scrollY === 0) {\n          return;\n        }\n\n        window.scrollTo(0, Math.round(cosParameter + cosParameter * Math.cos(scrollCount)));\n        oldTimestamp = newTimestamp;\n        window.requestAnimationFrame(step);\n    }\n\n    window.requestAnimationFrame(step);\n  }\n\n  useEffect(() => {\n    loadConfig('./config.json');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const { isValid, errorMessage } = ConfigService.validateConfig(config);\n    if (!isValid) {\n      setError(errorMessage);\n      return;\n    }\n  }, [config]);\n\n  const appName: string = config?.name || defaultAppName;\n\n  return (\n    <div className=\"restool-app\">\n      {\n        !config ? \n        <div className=\"app-error\">\n          {firstLoad ? 'Loading Configuration...' : 'Could not find config file.'}\n        </div> :\n        <AppContext.Provider value={{ config, activePage, setActivePage, error, setError, httpService }}>\n          <Router>\n            <aside>\n              <h1 title={appName} onClick={() => scrollToTop()}>{appName}</h1>\n              {\n                <Navigation />\n              }\n            </aside>\n            {\n              config &&\n              <Switch>\n                <Route exact path=\"/:page\" component={Page} />\n                <Redirect path=\"/\" to={`/${config?.pages?.[0]?.id || '1'}`} />\n              </Switch>\n            }\n            <ToastContainer \n              position={toast.POSITION.TOP_CENTER} \n              autoClose={4000} \n              draggable={false} \n            />\n          </Router>\n        </AppContext.Provider>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}